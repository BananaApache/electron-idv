// Generated from g4/TPTPv9.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import TPTPv9Listener from './TPTPv9Listener.js';
const serializedATN = [4,1,100,1619,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,1,0,5,0,422,8,0,10,0,12,0,425,9,0,1,0,1,0,1,1,1,
1,3,1,431,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,439,8,2,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
1,10,1,10,3,10,502,8,10,1,11,1,11,1,11,1,11,3,11,508,8,11,1,12,1,12,1,12,
3,12,513,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,521,8,13,1,14,1,14,1,14,
3,14,526,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,535,8,16,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,5,17,545,8,17,10,17,12,17,548,9,17,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,558,8,18,10,18,12,18,561,9,18,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,571,8,19,10,19,12,19,574,9,19,1,
20,1,20,1,20,3,20,579,8,20,1,21,1,21,3,21,583,8,21,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,3,22,592,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
1,25,1,25,1,25,1,25,1,25,3,25,608,8,25,1,26,1,26,1,26,1,26,1,27,1,27,3,27,
616,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,629,
8,30,1,31,1,31,3,31,633,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
643,8,32,1,33,1,33,3,33,647,8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,668,8,37,1,38,
1,38,1,38,1,38,1,38,3,38,675,8,38,1,39,1,39,1,39,1,39,1,39,3,39,682,8,39,
1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,693,8,41,1,42,1,42,1,42,
1,42,1,42,1,42,3,42,701,8,42,1,43,1,43,1,43,1,43,1,43,3,43,708,8,43,1,44,
1,44,1,44,1,44,1,44,3,44,715,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,732,8,45,1,46,1,46,1,47,1,47,1,47,
1,47,1,47,3,47,741,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,751,
8,48,1,49,1,49,1,49,3,49,756,8,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,3,52,
765,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,775,8,53,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,5,54,785,8,54,10,54,12,54,788,9,54,1,55,1,
55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,798,8,55,10,55,12,55,801,9,55,1,56,
1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,3,
59,818,8,59,1,60,1,60,1,60,1,60,1,60,1,60,3,60,826,8,60,1,61,1,61,3,61,830,
8,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,838,8,63,1,64,1,64,1,64,1,64,1,64,
1,64,1,64,1,64,5,64,848,8,64,10,64,12,64,851,9,64,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,5,65,861,8,65,10,65,12,65,864,9,65,1,66,1,66,1,66,3,66,
869,8,66,1,67,1,67,3,67,873,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
882,8,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
1,71,3,71,898,8,71,1,72,1,72,3,72,902,8,72,1,73,1,73,1,73,1,73,1,74,1,74,
3,74,910,8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,3,77,922,
8,77,1,78,1,78,1,78,1,78,1,78,1,78,3,78,930,8,78,1,79,1,79,1,80,1,80,1,80,
1,80,1,80,1,80,1,80,1,80,3,80,942,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,
1,82,1,82,1,82,3,82,954,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,
1,84,1,84,1,84,1,84,3,84,969,8,84,1,85,1,85,1,85,1,85,1,85,3,85,976,8,85,
1,86,1,86,1,86,1,86,1,86,3,86,983,8,86,1,87,1,87,1,87,1,87,1,88,1,88,3,88,
991,8,88,1,89,1,89,1,89,1,89,1,89,3,89,998,8,89,1,90,1,90,1,90,1,90,1,90,
1,90,1,91,1,91,1,91,3,91,1009,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
92,3,92,1019,8,92,1,93,1,93,1,93,1,93,1,93,3,93,1026,8,93,1,94,1,94,1,94,
1,94,1,94,3,94,1033,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1043,
8,95,1,96,1,96,3,96,1047,8,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1055,8,
97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
1070,8,99,1,100,1,100,1,100,1,100,1,100,3,100,1077,8,100,1,101,1,101,1,101,
1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1092,8,
101,1,102,1,102,1,102,1,102,1,102,3,102,1099,8,102,1,103,1,103,1,103,1,103,
1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,5,104,1113,8,104,10,104,
12,104,1116,9,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
3,106,1127,8,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,
109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
110,3,110,1151,8,110,1,111,1,111,1,111,1,111,1,111,3,111,1158,8,111,1,112,
1,112,3,112,1162,8,112,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,
114,1,114,1,114,1,114,3,114,1176,8,114,1,115,1,115,1,115,1,115,1,115,3,115,
1183,8,115,1,116,1,116,3,116,1187,8,116,1,117,1,117,1,118,1,118,1,119,1,
119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1202,8,120,1,121,1,121,
3,121,1206,8,121,1,122,1,122,3,122,1210,8,122,1,123,1,123,1,123,1,123,1,
123,1,123,1,123,1,124,1,124,3,124,1221,8,124,1,125,1,125,1,125,3,125,1226,
8,125,1,126,1,126,3,126,1230,8,126,1,127,1,127,1,127,1,127,1,128,1,128,3,
128,1238,8,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1248,
8,129,10,129,12,129,1251,9,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
1,130,5,130,1261,8,130,10,130,12,130,1264,9,130,1,131,1,131,1,131,1,131,
3,131,1270,8,131,1,132,1,132,1,132,1,132,1,133,1,133,3,133,1278,8,133,1,
134,1,134,1,134,1,134,1,134,1,134,3,134,1286,8,134,1,135,1,135,1,135,1,135,
1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,3,136,1300,8,136,1,137,1,
137,1,137,3,137,1305,8,137,1,138,1,138,1,139,1,139,3,139,1311,8,139,1,140,
1,140,1,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,1,143,1,143,1,143,
1,143,3,143,1327,8,143,1,144,1,144,3,144,1331,8,144,1,145,1,145,1,146,1,
146,1,146,1,146,1,146,1,146,3,146,1341,8,146,1,147,1,147,1,147,1,147,1,147,
1,147,3,147,1349,8,147,1,148,1,148,1,148,1,148,1,148,3,148,1356,8,148,1,
149,1,149,3,149,1360,8,149,1,150,1,150,1,150,3,150,1365,8,150,1,151,1,151,
1,151,1,151,1,151,1,151,1,151,1,151,3,151,1375,8,151,1,152,1,152,1,152,1,
152,1,152,3,152,1382,8,152,1,153,1,153,1,153,1,153,1,153,3,153,1389,8,153,
1,154,1,154,1,154,1,154,1,154,3,154,1396,8,154,1,155,1,155,1,155,1,155,1,
155,1,155,5,155,1404,8,155,10,155,12,155,1407,9,155,1,156,1,156,1,156,1,
156,1,156,1,156,1,156,1,156,1,156,3,156,1418,8,156,1,157,1,157,1,157,3,157,
1423,8,157,1,158,1,158,3,158,1427,8,158,1,159,1,159,1,160,1,160,1,161,1,
161,1,162,1,162,3,162,1437,8,162,1,163,1,163,1,164,1,164,1,165,1,165,1,165,
1,165,1,165,1,165,1,165,3,165,1450,8,165,1,166,1,166,1,167,1,167,1,168,1,
168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,
174,3,174,1470,8,174,1,175,1,175,3,175,1474,8,175,1,176,1,176,1,177,1,177,
1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,183,
1,184,1,184,1,185,1,185,3,185,1496,8,185,1,186,1,186,1,187,1,187,3,187,1502,
8,187,1,188,1,188,1,189,1,189,1,190,1,190,1,190,3,190,1511,8,190,1,191,1,
191,1,192,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,1,193,1,
193,1,193,3,193,1528,8,193,1,194,1,194,1,194,1,194,1,194,3,194,1535,8,194,
1,195,1,195,1,195,1,195,1,195,3,195,1542,8,195,1,196,1,196,1,197,1,197,1,
197,1,197,1,197,1,197,3,197,1552,8,197,1,198,1,198,1,198,1,198,1,198,1,198,
3,198,1560,8,198,1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,
200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,
200,1,200,1,200,1,200,3,200,1587,8,200,1,201,1,201,1,201,1,201,1,201,3,201,
1594,8,201,1,202,1,202,1,202,1,202,1,202,3,202,1601,8,202,1,203,1,203,3,
203,1605,8,203,1,204,1,204,1,205,1,205,1,206,1,206,1,207,1,207,1,208,1,208,
1,209,1,209,1,209,0,11,34,36,38,108,110,128,130,208,258,260,310,210,0,2,
4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,0,7,2,0,19,19,
29,29,1,0,30,32,3,0,27,27,34,34,71,71,2,0,10,10,66,66,1,0,45,49,2,0,60,60,
65,65,3,0,72,72,75,75,78,78,1599,0,423,1,0,0,0,2,430,1,0,0,0,4,438,1,0,0,
0,6,440,1,0,0,0,8,449,1,0,0,0,10,451,1,0,0,0,12,460,1,0,0,0,14,469,1,0,0,
0,16,478,1,0,0,0,18,487,1,0,0,0,20,501,1,0,0,0,22,507,1,0,0,0,24,512,1,0,
0,0,26,520,1,0,0,0,28,525,1,0,0,0,30,527,1,0,0,0,32,534,1,0,0,0,34,536,1,
0,0,0,36,549,1,0,0,0,38,562,1,0,0,0,40,578,1,0,0,0,42,582,1,0,0,0,44,591,
1,0,0,0,46,593,1,0,0,0,48,596,1,0,0,0,50,607,1,0,0,0,52,609,1,0,0,0,54,615,
1,0,0,0,56,617,1,0,0,0,58,620,1,0,0,0,60,628,1,0,0,0,62,632,1,0,0,0,64,642,
1,0,0,0,66,646,1,0,0,0,68,648,1,0,0,0,70,652,1,0,0,0,72,654,1,0,0,0,74,667,
1,0,0,0,76,674,1,0,0,0,78,681,1,0,0,0,80,683,1,0,0,0,82,692,1,0,0,0,84,700,
1,0,0,0,86,707,1,0,0,0,88,714,1,0,0,0,90,731,1,0,0,0,92,733,1,0,0,0,94,740,
1,0,0,0,96,750,1,0,0,0,98,755,1,0,0,0,100,757,1,0,0,0,102,759,1,0,0,0,104,
764,1,0,0,0,106,774,1,0,0,0,108,776,1,0,0,0,110,789,1,0,0,0,112,802,1,0,
0,0,114,806,1,0,0,0,116,810,1,0,0,0,118,817,1,0,0,0,120,825,1,0,0,0,122,
829,1,0,0,0,124,831,1,0,0,0,126,837,1,0,0,0,128,839,1,0,0,0,130,852,1,0,
0,0,132,868,1,0,0,0,134,872,1,0,0,0,136,881,1,0,0,0,138,883,1,0,0,0,140,
885,1,0,0,0,142,897,1,0,0,0,144,901,1,0,0,0,146,903,1,0,0,0,148,909,1,0,
0,0,150,911,1,0,0,0,152,914,1,0,0,0,154,921,1,0,0,0,156,929,1,0,0,0,158,
931,1,0,0,0,160,941,1,0,0,0,162,943,1,0,0,0,164,953,1,0,0,0,166,955,1,0,
0,0,168,968,1,0,0,0,170,975,1,0,0,0,172,982,1,0,0,0,174,984,1,0,0,0,176,
990,1,0,0,0,178,997,1,0,0,0,180,999,1,0,0,0,182,1008,1,0,0,0,184,1018,1,
0,0,0,186,1025,1,0,0,0,188,1032,1,0,0,0,190,1042,1,0,0,0,192,1046,1,0,0,
0,194,1054,1,0,0,0,196,1056,1,0,0,0,198,1069,1,0,0,0,200,1076,1,0,0,0,202,
1091,1,0,0,0,204,1098,1,0,0,0,206,1100,1,0,0,0,208,1104,1,0,0,0,210,1117,
1,0,0,0,212,1126,1,0,0,0,214,1128,1,0,0,0,216,1132,1,0,0,0,218,1136,1,0,
0,0,220,1150,1,0,0,0,222,1157,1,0,0,0,224,1161,1,0,0,0,226,1163,1,0,0,0,
228,1175,1,0,0,0,230,1182,1,0,0,0,232,1186,1,0,0,0,234,1188,1,0,0,0,236,
1190,1,0,0,0,238,1192,1,0,0,0,240,1201,1,0,0,0,242,1205,1,0,0,0,244,1209,
1,0,0,0,246,1211,1,0,0,0,248,1220,1,0,0,0,250,1225,1,0,0,0,252,1229,1,0,
0,0,254,1231,1,0,0,0,256,1237,1,0,0,0,258,1239,1,0,0,0,260,1252,1,0,0,0,
262,1269,1,0,0,0,264,1271,1,0,0,0,266,1277,1,0,0,0,268,1285,1,0,0,0,270,
1287,1,0,0,0,272,1299,1,0,0,0,274,1304,1,0,0,0,276,1306,1,0,0,0,278,1310,
1,0,0,0,280,1312,1,0,0,0,282,1314,1,0,0,0,284,1318,1,0,0,0,286,1326,1,0,
0,0,288,1330,1,0,0,0,290,1332,1,0,0,0,292,1340,1,0,0,0,294,1348,1,0,0,0,
296,1355,1,0,0,0,298,1359,1,0,0,0,300,1364,1,0,0,0,302,1374,1,0,0,0,304,
1381,1,0,0,0,306,1388,1,0,0,0,308,1395,1,0,0,0,310,1397,1,0,0,0,312,1417,
1,0,0,0,314,1422,1,0,0,0,316,1426,1,0,0,0,318,1428,1,0,0,0,320,1430,1,0,
0,0,322,1432,1,0,0,0,324,1436,1,0,0,0,326,1438,1,0,0,0,328,1440,1,0,0,0,
330,1449,1,0,0,0,332,1451,1,0,0,0,334,1453,1,0,0,0,336,1455,1,0,0,0,338,
1457,1,0,0,0,340,1459,1,0,0,0,342,1461,1,0,0,0,344,1463,1,0,0,0,346,1465,
1,0,0,0,348,1469,1,0,0,0,350,1473,1,0,0,0,352,1475,1,0,0,0,354,1477,1,0,
0,0,356,1479,1,0,0,0,358,1481,1,0,0,0,360,1483,1,0,0,0,362,1485,1,0,0,0,
364,1487,1,0,0,0,366,1489,1,0,0,0,368,1491,1,0,0,0,370,1495,1,0,0,0,372,
1497,1,0,0,0,374,1501,1,0,0,0,376,1503,1,0,0,0,378,1505,1,0,0,0,380,1510,
1,0,0,0,382,1512,1,0,0,0,384,1514,1,0,0,0,386,1527,1,0,0,0,388,1534,1,0,
0,0,390,1541,1,0,0,0,392,1543,1,0,0,0,394,1551,1,0,0,0,396,1559,1,0,0,0,
398,1561,1,0,0,0,400,1586,1,0,0,0,402,1593,1,0,0,0,404,1600,1,0,0,0,406,
1604,1,0,0,0,408,1606,1,0,0,0,410,1608,1,0,0,0,412,1610,1,0,0,0,414,1612,
1,0,0,0,416,1614,1,0,0,0,418,1616,1,0,0,0,420,422,3,2,1,0,421,420,1,0,0,
0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,
1,0,0,0,426,427,5,0,0,1,427,1,1,0,0,0,428,431,3,4,2,0,429,431,3,384,192,
0,430,428,1,0,0,0,430,429,1,0,0,0,431,3,1,0,0,0,432,439,3,10,5,0,433,439,
3,12,6,0,434,439,3,14,7,0,435,439,3,16,8,0,436,439,3,18,9,0,437,439,3,6,
3,0,438,432,1,0,0,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,0,438,
436,1,0,0,0,438,437,1,0,0,0,439,5,1,0,0,0,440,441,5,1,0,0,441,442,3,406,
203,0,442,443,5,2,0,0,443,444,3,22,11,0,444,445,5,2,0,0,445,446,3,8,4,0,
446,447,3,20,10,0,447,448,5,3,0,0,448,7,1,0,0,0,449,450,3,248,124,0,450,
9,1,0,0,0,451,452,5,4,0,0,452,453,3,406,203,0,453,454,5,2,0,0,454,455,3,
22,11,0,455,456,5,2,0,0,456,457,3,24,12,0,457,458,3,20,10,0,458,459,5,3,
0,0,459,11,1,0,0,0,460,461,5,5,0,0,461,462,3,406,203,0,462,463,5,2,0,0,463,
464,3,22,11,0,464,465,5,2,0,0,465,466,3,118,59,0,466,467,3,20,10,0,467,468,
5,3,0,0,468,13,1,0,0,0,469,470,5,6,0,0,470,471,3,406,203,0,471,472,5,2,0,
0,472,473,3,22,11,0,473,474,5,2,0,0,474,475,3,242,121,0,475,476,3,20,10,
0,476,477,5,3,0,0,477,15,1,0,0,0,478,479,5,7,0,0,479,480,3,406,203,0,480,
481,5,2,0,0,481,482,3,22,11,0,482,483,5,2,0,0,483,484,3,248,124,0,484,485,
3,20,10,0,485,486,5,3,0,0,486,17,1,0,0,0,487,488,5,8,0,0,488,489,3,406,203,
0,489,490,5,2,0,0,490,491,3,22,11,0,491,492,5,2,0,0,492,493,3,308,154,0,
493,494,3,20,10,0,494,495,5,3,0,0,495,19,1,0,0,0,496,497,5,2,0,0,497,498,
3,378,189,0,498,499,3,380,190,0,499,502,1,0,0,0,500,502,3,418,209,0,501,
496,1,0,0,0,501,500,1,0,0,0,502,21,1,0,0,0,503,508,5,65,0,0,504,505,5,65,
0,0,505,506,5,9,0,0,506,508,3,394,197,0,507,503,1,0,0,0,507,504,1,0,0,0,
508,23,1,0,0,0,509,513,3,26,13,0,510,513,3,96,48,0,511,513,3,112,56,0,512,
509,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,25,1,0,0,0,514,521,3,44,
22,0,515,521,3,54,27,0,516,521,3,28,14,0,517,521,3,68,34,0,518,521,3,114,
57,0,519,521,3,116,58,0,520,514,1,0,0,0,520,515,1,0,0,0,520,516,1,0,0,0,
520,517,1,0,0,0,520,518,1,0,0,0,520,519,1,0,0,0,521,27,1,0,0,0,522,526,3,
30,15,0,523,526,3,32,16,0,524,526,3,104,52,0,525,522,1,0,0,0,525,523,1,0,
0,0,525,524,1,0,0,0,526,29,1,0,0,0,527,528,3,40,20,0,528,529,3,330,165,0,
529,530,3,40,20,0,530,31,1,0,0,0,531,535,3,34,17,0,532,535,3,36,18,0,533,
535,3,38,19,0,534,531,1,0,0,0,534,532,1,0,0,0,534,533,1,0,0,0,535,33,1,0,
0,0,536,537,6,17,-1,0,537,538,3,40,20,0,538,539,5,66,0,0,539,540,3,40,20,
0,540,546,1,0,0,0,541,542,10,1,0,0,542,543,5,66,0,0,543,545,3,40,20,0,544,
541,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,35,1,0,0,
0,548,546,1,0,0,0,549,550,6,18,-1,0,550,551,3,40,20,0,551,552,5,10,0,0,552,
553,3,40,20,0,553,559,1,0,0,0,554,555,10,1,0,0,555,556,5,10,0,0,556,558,
3,40,20,0,557,554,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,
0,560,37,1,0,0,0,561,559,1,0,0,0,562,563,6,19,-1,0,563,564,3,40,20,0,564,
565,5,11,0,0,565,566,3,40,20,0,566,572,1,0,0,0,567,568,10,1,0,0,568,569,
5,11,0,0,569,571,3,40,20,0,570,567,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,
0,572,573,1,0,0,0,573,39,1,0,0,0,574,572,1,0,0,0,575,579,3,44,22,0,576,579,
3,54,27,0,577,579,3,68,34,0,578,575,1,0,0,0,578,576,1,0,0,0,578,577,1,0,
0,0,579,41,1,0,0,0,580,583,3,44,22,0,581,583,3,56,28,0,582,580,1,0,0,0,582,
581,1,0,0,0,583,43,1,0,0,0,584,592,3,46,23,0,585,592,3,60,30,0,586,592,3,
376,188,0,587,588,5,12,0,0,588,589,3,26,13,0,589,590,5,13,0,0,590,592,1,
0,0,0,591,584,1,0,0,0,591,585,1,0,0,0,591,586,1,0,0,0,591,587,1,0,0,0,592,
45,1,0,0,0,593,594,3,48,24,0,594,595,3,40,20,0,595,47,1,0,0,0,596,597,3,
314,157,0,597,598,5,14,0,0,598,599,3,50,25,0,599,600,5,15,0,0,600,601,5,
16,0,0,601,49,1,0,0,0,602,608,3,52,26,0,603,604,3,52,26,0,604,605,5,2,0,
0,605,606,3,50,25,0,606,608,1,0,0,0,607,602,1,0,0,0,607,603,1,0,0,0,608,
51,1,0,0,0,609,610,3,376,188,0,610,611,5,16,0,0,611,612,3,98,49,0,612,53,
1,0,0,0,613,616,3,56,28,0,614,616,3,58,29,0,615,613,1,0,0,0,615,614,1,0,
0,0,616,55,1,0,0,0,617,618,3,316,158,0,618,619,3,42,21,0,619,57,1,0,0,0,
620,621,3,84,42,0,621,622,3,356,178,0,622,623,3,84,42,0,623,59,1,0,0,0,624,
629,3,62,31,0,625,629,3,64,32,0,626,629,3,70,35,0,627,629,3,90,45,0,628,
624,1,0,0,0,628,625,1,0,0,0,628,626,1,0,0,0,628,627,1,0,0,0,629,61,1,0,0,
0,630,633,3,358,179,0,631,633,3,88,44,0,632,630,1,0,0,0,632,631,1,0,0,0,
633,63,1,0,0,0,634,643,3,362,181,0,635,643,3,66,33,0,636,637,5,12,0,0,637,
638,3,86,43,0,638,639,5,13,0,0,639,643,1,0,0,0,640,643,3,220,110,0,641,643,
3,72,36,0,642,634,1,0,0,0,642,635,1,0,0,0,642,636,1,0,0,0,642,640,1,0,0,
0,642,641,1,0,0,0,643,65,1,0,0,0,644,647,3,374,187,0,645,647,3,372,186,0,
646,644,1,0,0,0,646,645,1,0,0,0,647,67,1,0,0,0,648,649,3,84,42,0,649,650,
3,352,176,0,650,651,3,84,42,0,651,69,1,0,0,0,652,653,3,366,183,0,653,71,
1,0,0,0,654,655,5,17,0,0,655,656,3,74,37,0,656,657,5,2,0,0,657,658,3,78,
39,0,658,659,5,2,0,0,659,660,3,26,13,0,660,661,5,13,0,0,661,73,1,0,0,0,662,
668,3,96,48,0,663,664,5,14,0,0,664,665,3,76,38,0,665,666,5,15,0,0,666,668,
1,0,0,0,667,662,1,0,0,0,667,663,1,0,0,0,668,75,1,0,0,0,669,675,3,96,48,0,
670,671,3,96,48,0,671,672,5,2,0,0,672,673,3,76,38,0,673,675,1,0,0,0,674,
669,1,0,0,0,674,670,1,0,0,0,675,77,1,0,0,0,676,682,3,80,40,0,677,678,5,14,
0,0,678,679,3,82,41,0,679,680,5,15,0,0,680,682,1,0,0,0,681,676,1,0,0,0,681,
677,1,0,0,0,682,79,1,0,0,0,683,684,3,26,13,0,684,685,3,338,169,0,685,686,
3,26,13,0,686,81,1,0,0,0,687,693,3,80,40,0,688,689,3,80,40,0,689,690,5,2,
0,0,690,691,3,82,41,0,691,693,1,0,0,0,692,687,1,0,0,0,692,688,1,0,0,0,693,
83,1,0,0,0,694,701,3,60,30,0,695,701,3,376,188,0,696,697,5,12,0,0,697,698,
3,26,13,0,698,699,5,13,0,0,699,701,1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,
0,700,696,1,0,0,0,701,85,1,0,0,0,702,708,3,330,165,0,703,708,3,332,166,0,
704,708,3,354,177,0,705,708,3,356,178,0,706,708,3,316,158,0,707,702,1,0,
0,0,707,703,1,0,0,0,707,704,1,0,0,0,707,705,1,0,0,0,707,706,1,0,0,0,708,
87,1,0,0,0,709,715,5,18,0,0,710,711,5,14,0,0,711,712,3,94,47,0,712,713,5,
15,0,0,713,715,1,0,0,0,714,709,1,0,0,0,714,710,1,0,0,0,715,89,1,0,0,0,716,
717,3,360,180,0,717,718,5,12,0,0,718,719,3,92,46,0,719,720,5,13,0,0,720,
732,1,0,0,0,721,722,3,364,182,0,722,723,5,12,0,0,723,724,3,92,46,0,724,725,
5,13,0,0,725,732,1,0,0,0,726,727,3,368,184,0,727,728,5,12,0,0,728,729,3,
92,46,0,729,730,5,13,0,0,730,732,1,0,0,0,731,716,1,0,0,0,731,721,1,0,0,0,
731,726,1,0,0,0,732,91,1,0,0,0,733,734,3,94,47,0,734,93,1,0,0,0,735,741,
3,26,13,0,736,737,3,26,13,0,737,738,5,2,0,0,738,739,3,94,47,0,739,741,1,
0,0,0,740,735,1,0,0,0,740,736,1,0,0,0,741,95,1,0,0,0,742,743,3,350,175,0,
743,744,5,16,0,0,744,745,3,98,49,0,745,751,1,0,0,0,746,747,5,12,0,0,747,
748,3,96,48,0,748,749,5,13,0,0,749,751,1,0,0,0,750,742,1,0,0,0,750,746,1,
0,0,0,751,97,1,0,0,0,752,756,3,100,50,0,753,756,3,106,53,0,754,756,3,102,
51,0,755,752,1,0,0,0,755,753,1,0,0,0,755,754,1,0,0,0,756,99,1,0,0,0,757,
758,3,44,22,0,758,101,1,0,0,0,759,760,3,38,19,0,760,103,1,0,0,0,761,765,
3,106,53,0,762,765,3,108,54,0,763,765,3,110,55,0,764,761,1,0,0,0,764,762,
1,0,0,0,764,763,1,0,0,0,765,105,1,0,0,0,766,767,3,100,50,0,767,768,5,69,
0,0,768,769,3,100,50,0,769,775,1,0,0,0,770,771,3,100,50,0,771,772,5,69,0,
0,772,773,3,106,53,0,773,775,1,0,0,0,774,766,1,0,0,0,774,770,1,0,0,0,775,
107,1,0,0,0,776,777,6,54,-1,0,777,778,3,100,50,0,778,779,5,67,0,0,779,780,
3,100,50,0,780,786,1,0,0,0,781,782,10,1,0,0,782,783,5,67,0,0,783,785,3,100,
50,0,784,781,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,
109,1,0,0,0,788,786,1,0,0,0,789,790,6,55,-1,0,790,791,3,100,50,0,791,792,
5,68,0,0,792,793,3,100,50,0,793,799,1,0,0,0,794,795,10,1,0,0,795,796,5,68,
0,0,796,798,3,100,50,0,797,794,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,
800,1,0,0,0,800,111,1,0,0,0,801,799,1,0,0,0,802,803,3,350,175,0,803,804,
3,322,161,0,804,805,3,348,174,0,805,113,1,0,0,0,806,807,3,60,30,0,807,808,
3,340,170,0,808,809,3,26,13,0,809,115,1,0,0,0,810,811,3,88,44,0,811,812,
3,336,168,0,812,813,3,88,44,0,813,117,1,0,0,0,814,818,3,120,60,0,815,818,
3,190,95,0,816,818,3,214,107,0,817,814,1,0,0,0,817,815,1,0,0,0,817,816,1,
0,0,0,818,119,1,0,0,0,819,826,3,136,68,0,820,826,3,148,74,0,821,826,3,122,
61,0,822,826,3,162,81,0,823,826,3,216,108,0,824,826,3,218,109,0,825,819,
1,0,0,0,825,820,1,0,0,0,825,821,1,0,0,0,825,822,1,0,0,0,825,823,1,0,0,0,
825,824,1,0,0,0,826,121,1,0,0,0,827,830,3,124,62,0,828,830,3,126,63,0,829,
827,1,0,0,0,829,828,1,0,0,0,830,123,1,0,0,0,831,832,3,132,66,0,832,833,3,
330,165,0,833,834,3,132,66,0,834,125,1,0,0,0,835,838,3,128,64,0,836,838,
3,130,65,0,837,835,1,0,0,0,837,836,1,0,0,0,838,127,1,0,0,0,839,840,6,64,
-1,0,840,841,3,132,66,0,841,842,5,66,0,0,842,843,3,132,66,0,843,849,1,0,
0,0,844,845,10,1,0,0,845,846,5,66,0,0,846,848,3,132,66,0,847,844,1,0,0,0,
848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,129,1,0,0,0,851,849,
1,0,0,0,852,853,6,65,-1,0,853,854,3,132,66,0,854,855,5,10,0,0,855,856,3,
132,66,0,856,862,1,0,0,0,857,858,10,1,0,0,858,859,5,10,0,0,859,861,3,132,
66,0,860,857,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,
131,1,0,0,0,864,862,1,0,0,0,865,869,3,136,68,0,866,869,3,148,74,0,867,869,
3,162,81,0,868,865,1,0,0,0,868,866,1,0,0,0,868,867,1,0,0,0,869,133,1,0,0,
0,870,873,3,136,68,0,871,873,3,150,75,0,872,870,1,0,0,0,872,871,1,0,0,0,
873,135,1,0,0,0,874,882,3,140,70,0,875,882,3,154,77,0,876,882,3,138,69,0,
877,878,5,12,0,0,878,879,3,120,60,0,879,880,5,13,0,0,880,882,1,0,0,0,881,
874,1,0,0,0,881,875,1,0,0,0,881,876,1,0,0,0,881,877,1,0,0,0,882,137,1,0,
0,0,883,884,3,376,188,0,884,139,1,0,0,0,885,886,3,326,163,0,886,887,5,14,
0,0,887,888,3,142,71,0,888,889,5,15,0,0,889,890,5,16,0,0,890,891,3,132,66,
0,891,141,1,0,0,0,892,898,3,144,72,0,893,894,3,144,72,0,894,895,5,2,0,0,
895,896,3,142,71,0,896,898,1,0,0,0,897,892,1,0,0,0,897,893,1,0,0,0,898,143,
1,0,0,0,899,902,3,146,73,0,900,902,3,376,188,0,901,899,1,0,0,0,901,900,1,
0,0,0,902,145,1,0,0,0,903,904,3,376,188,0,904,905,5,16,0,0,905,906,3,202,
101,0,906,147,1,0,0,0,907,910,3,150,75,0,908,910,3,152,76,0,909,907,1,0,
0,0,909,908,1,0,0,0,910,149,1,0,0,0,911,912,3,324,162,0,912,913,3,134,67,
0,913,151,1,0,0,0,914,915,3,184,92,0,915,916,3,356,178,0,916,917,3,184,92,
0,917,153,1,0,0,0,918,922,3,156,78,0,919,922,3,158,79,0,920,922,3,164,82,
0,921,918,1,0,0,0,921,919,1,0,0,0,921,920,1,0,0,0,922,155,1,0,0,0,923,930,
3,358,179,0,924,925,3,360,180,0,925,926,5,12,0,0,926,927,3,188,94,0,927,
928,5,13,0,0,928,930,1,0,0,0,929,923,1,0,0,0,929,924,1,0,0,0,930,157,1,0,
0,0,931,932,3,160,80,0,932,159,1,0,0,0,933,942,3,362,181,0,934,935,3,364,
182,0,935,936,5,12,0,0,936,937,3,188,94,0,937,938,5,13,0,0,938,942,1,0,0,
0,939,942,3,180,90,0,940,942,3,166,83,0,941,933,1,0,0,0,941,934,1,0,0,0,
941,939,1,0,0,0,941,940,1,0,0,0,942,161,1,0,0,0,943,944,3,184,92,0,944,945,
3,352,176,0,945,946,3,184,92,0,946,163,1,0,0,0,947,954,3,366,183,0,948,949,
3,368,184,0,949,950,5,12,0,0,950,951,3,188,94,0,951,952,5,13,0,0,952,954,
1,0,0,0,953,947,1,0,0,0,953,948,1,0,0,0,954,165,1,0,0,0,955,956,5,17,0,0,
956,957,3,168,84,0,957,958,5,2,0,0,958,959,3,172,86,0,959,960,5,2,0,0,960,
961,3,182,91,0,961,962,5,13,0,0,962,167,1,0,0,0,963,969,3,190,95,0,964,965,
5,14,0,0,965,966,3,170,85,0,966,967,5,15,0,0,967,969,1,0,0,0,968,963,1,0,
0,0,968,964,1,0,0,0,969,169,1,0,0,0,970,976,3,190,95,0,971,972,3,190,95,
0,972,973,5,2,0,0,973,974,3,170,85,0,974,976,1,0,0,0,975,970,1,0,0,0,975,
971,1,0,0,0,976,171,1,0,0,0,977,983,3,174,87,0,978,979,5,14,0,0,979,980,
3,178,89,0,980,981,5,15,0,0,981,983,1,0,0,0,982,977,1,0,0,0,982,978,1,0,
0,0,983,173,1,0,0,0,984,985,3,176,88,0,985,986,3,338,169,0,986,987,3,182,
91,0,987,175,1,0,0,0,988,991,3,156,78,0,989,991,3,186,93,0,990,988,1,0,0,
0,990,989,1,0,0,0,991,177,1,0,0,0,992,998,3,174,87,0,993,994,3,174,87,0,
994,995,5,2,0,0,995,996,3,178,89,0,996,998,1,0,0,0,997,992,1,0,0,0,997,993,
1,0,0,0,998,179,1,0,0,0,999,1000,3,228,114,0,1000,1001,5,11,0,0,1001,1002,
5,12,0,0,1002,1003,3,188,94,0,1003,1004,5,13,0,0,1004,181,1,0,0,0,1005,1009,
3,120,60,0,1006,1009,3,374,187,0,1007,1009,3,186,93,0,1008,1005,1,0,0,0,
1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,183,1,0,0,0,1010,1019,3,154,77,
0,1011,1019,3,374,187,0,1012,1019,3,186,93,0,1013,1019,3,376,188,0,1014,
1015,5,12,0,0,1015,1016,3,120,60,0,1016,1017,5,13,0,0,1017,1019,1,0,0,0,
1018,1010,1,0,0,0,1018,1011,1,0,0,0,1018,1012,1,0,0,0,1018,1013,1,0,0,0,
1018,1014,1,0,0,0,1019,185,1,0,0,0,1020,1026,5,18,0,0,1021,1022,5,14,0,0,
1022,1023,3,188,94,0,1023,1024,5,15,0,0,1024,1026,1,0,0,0,1025,1020,1,0,
0,0,1025,1021,1,0,0,0,1026,187,1,0,0,0,1027,1033,3,182,91,0,1028,1029,3,
182,91,0,1029,1030,5,2,0,0,1030,1031,3,188,94,0,1031,1033,1,0,0,0,1032,1027,
1,0,0,0,1032,1028,1,0,0,0,1033,189,1,0,0,0,1034,1035,3,350,175,0,1035,1036,
5,16,0,0,1036,1037,3,192,96,0,1037,1043,1,0,0,0,1038,1039,5,12,0,0,1039,
1040,3,190,95,0,1040,1041,5,13,0,0,1041,1043,1,0,0,0,1042,1034,1,0,0,0,1042,
1038,1,0,0,0,1043,191,1,0,0,0,1044,1047,3,202,101,0,1045,1047,3,194,97,0,
1046,1044,1,0,0,0,1046,1045,1,0,0,0,1047,193,1,0,0,0,1048,1055,3,206,103,
0,1049,1055,3,196,98,0,1050,1051,5,12,0,0,1051,1052,3,194,97,0,1052,1053,
5,13,0,0,1053,1055,1,0,0,0,1054,1048,1,0,0,0,1054,1049,1,0,0,0,1054,1050,
1,0,0,0,1055,195,1,0,0,0,1056,1057,5,19,0,0,1057,1058,5,14,0,0,1058,1059,
3,142,71,0,1059,1060,5,15,0,0,1060,1061,5,16,0,0,1061,1062,3,198,99,0,1062,
197,1,0,0,0,1063,1070,3,202,101,0,1064,1065,5,12,0,0,1065,1066,3,206,103,
0,1066,1067,5,13,0,0,1067,1070,1,0,0,0,1068,1070,3,196,98,0,1069,1063,1,
0,0,0,1069,1064,1,0,0,0,1069,1068,1,0,0,0,1070,199,1,0,0,0,1071,1077,3,202,
101,0,1072,1073,5,12,0,0,1073,1074,3,208,104,0,1074,1075,5,13,0,0,1075,1077,
1,0,0,0,1076,1071,1,0,0,0,1076,1072,1,0,0,0,1077,201,1,0,0,0,1078,1092,3,
342,171,0,1079,1092,3,346,173,0,1080,1092,3,376,188,0,1081,1082,3,344,172,
0,1082,1083,5,12,0,0,1083,1084,3,204,102,0,1084,1085,5,13,0,0,1085,1092,
1,0,0,0,1086,1087,5,12,0,0,1087,1088,3,202,101,0,1088,1089,5,13,0,0,1089,
1092,1,0,0,0,1090,1092,3,210,105,0,1091,1078,1,0,0,0,1091,1079,1,0,0,0,1091,
1080,1,0,0,0,1091,1081,1,0,0,0,1091,1086,1,0,0,0,1091,1090,1,0,0,0,1092,
203,1,0,0,0,1093,1099,3,202,101,0,1094,1095,3,202,101,0,1095,1096,5,2,0,
0,1096,1097,3,204,102,0,1097,1099,1,0,0,0,1098,1093,1,0,0,0,1098,1094,1,
0,0,0,1099,205,1,0,0,0,1100,1101,3,200,100,0,1101,1102,5,69,0,0,1102,1103,
3,202,101,0,1103,207,1,0,0,0,1104,1105,6,104,-1,0,1105,1106,3,200,100,0,
1106,1107,5,67,0,0,1107,1108,3,202,101,0,1108,1114,1,0,0,0,1109,1110,10,
1,0,0,1110,1111,5,67,0,0,1111,1113,3,202,101,0,1112,1109,1,0,0,0,1113,1116,
1,0,0,0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,209,1,0,0,0,1116,1114,1,
0,0,0,1117,1118,5,14,0,0,1118,1119,3,212,106,0,1119,1120,5,15,0,0,1120,211,
1,0,0,0,1121,1127,3,192,96,0,1122,1123,3,192,96,0,1123,1124,5,2,0,0,1124,
1125,3,212,106,0,1125,1127,1,0,0,0,1126,1121,1,0,0,0,1126,1122,1,0,0,0,1127,
213,1,0,0,0,1128,1129,3,350,175,0,1129,1130,3,322,161,0,1130,1131,3,348,
174,0,1131,215,1,0,0,0,1132,1133,3,154,77,0,1133,1134,3,340,170,0,1134,1135,
3,182,91,0,1135,217,1,0,0,0,1136,1137,3,186,93,0,1137,1138,3,336,168,0,1138,
1139,3,186,93,0,1139,219,1,0,0,0,1140,1141,5,20,0,0,1141,1142,3,236,118,
0,1142,1143,5,21,0,0,1143,1151,1,0,0,0,1144,1145,5,20,0,0,1145,1146,3,236,
118,0,1146,1147,5,12,0,0,1147,1148,3,222,111,0,1148,1149,5,22,0,0,1149,1151,
1,0,0,0,1150,1140,1,0,0,0,1150,1144,1,0,0,0,1151,221,1,0,0,0,1152,1158,3,
224,112,0,1153,1154,3,224,112,0,1154,1155,5,2,0,0,1155,1156,3,222,111,0,
1156,1158,1,0,0,0,1157,1152,1,0,0,0,1157,1153,1,0,0,0,1158,223,1,0,0,0,1159,
1162,3,238,119,0,1160,1162,3,226,113,0,1161,1159,1,0,0,0,1161,1160,1,0,0,
0,1162,225,1,0,0,0,1163,1164,3,114,57,0,1164,227,1,0,0,0,1165,1166,5,20,
0,0,1166,1167,3,236,118,0,1167,1168,5,21,0,0,1168,1176,1,0,0,0,1169,1170,
5,20,0,0,1170,1171,3,236,118,0,1171,1172,5,12,0,0,1172,1173,3,230,115,0,
1173,1174,5,22,0,0,1174,1176,1,0,0,0,1175,1165,1,0,0,0,1175,1169,1,0,0,0,
1176,229,1,0,0,0,1177,1183,3,232,116,0,1178,1179,3,232,116,0,1179,1180,5,
2,0,0,1180,1181,3,230,115,0,1181,1183,1,0,0,0,1182,1177,1,0,0,0,1182,1178,
1,0,0,0,1183,231,1,0,0,0,1184,1187,3,238,119,0,1185,1187,3,234,117,0,1186,
1184,1,0,0,0,1186,1185,1,0,0,0,1187,233,1,0,0,0,1188,1189,3,216,108,0,1189,
235,1,0,0,0,1190,1191,3,370,185,0,1191,237,1,0,0,0,1192,1193,5,71,0,0,1193,
1194,3,184,92,0,1194,239,1,0,0,0,1195,1202,5,23,0,0,1196,1197,5,70,0,0,1197,
1198,5,24,0,0,1198,1202,5,69,0,0,1199,1202,5,25,0,0,1200,1202,5,26,0,0,1201,
1195,1,0,0,0,1201,1196,1,0,0,0,1201,1199,1,0,0,0,1201,1200,1,0,0,0,1202,
241,1,0,0,0,1203,1206,3,244,122,0,1204,1206,3,190,95,0,1205,1203,1,0,0,0,
1205,1204,1,0,0,0,1206,243,1,0,0,0,1207,1210,3,246,123,0,1208,1210,3,308,
154,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,1210,245,1,0,0,0,1211,1212,5,27,
0,0,1212,1213,5,14,0,0,1213,1214,3,142,71,0,1214,1215,5,15,0,0,1215,1216,
5,16,0,0,1216,1217,3,244,122,0,1217,247,1,0,0,0,1218,1221,3,250,125,0,1219,
1221,3,302,151,0,1220,1218,1,0,0,0,1220,1219,1,0,0,0,1221,249,1,0,0,0,1222,
1226,3,252,126,0,1223,1226,3,262,131,0,1224,1226,3,268,134,0,1225,1222,1,
0,0,0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,251,1,0,0,0,1227,1230,3,254,
127,0,1228,1230,3,256,128,0,1229,1227,1,0,0,0,1229,1228,1,0,0,0,1230,253,
1,0,0,0,1231,1232,3,266,133,0,1232,1233,3,330,165,0,1233,1234,3,266,133,
0,1234,255,1,0,0,0,1235,1238,3,258,129,0,1236,1238,3,260,130,0,1237,1235,
1,0,0,0,1237,1236,1,0,0,0,1238,257,1,0,0,0,1239,1240,6,129,-1,0,1240,1241,
3,266,133,0,1241,1242,5,66,0,0,1242,1243,3,266,133,0,1243,1249,1,0,0,0,1244,
1245,10,1,0,0,1245,1246,5,66,0,0,1246,1248,3,266,133,0,1247,1244,1,0,0,0,
1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,259,1,0,0,0,1251,
1249,1,0,0,0,1252,1253,6,130,-1,0,1253,1254,3,266,133,0,1254,1255,5,10,0,
0,1255,1256,3,266,133,0,1256,1262,1,0,0,0,1257,1258,10,1,0,0,1258,1259,5,
10,0,0,1259,1261,3,266,133,0,1260,1257,1,0,0,0,1261,1264,1,0,0,0,1262,1260,
1,0,0,0,1262,1263,1,0,0,0,1263,261,1,0,0,0,1264,1262,1,0,0,0,1265,1266,3,
334,167,0,1266,1267,3,266,133,0,1267,1270,1,0,0,0,1268,1270,3,264,132,0,
1269,1265,1,0,0,0,1269,1268,1,0,0,0,1270,263,1,0,0,0,1271,1272,3,298,149,
0,1272,1273,3,356,178,0,1273,1274,3,298,149,0,1274,265,1,0,0,0,1275,1278,
3,268,134,0,1276,1278,3,262,131,0,1277,1275,1,0,0,0,1277,1276,1,0,0,0,1278,
267,1,0,0,0,1279,1286,3,270,135,0,1280,1286,3,274,137,0,1281,1282,5,12,0,
0,1282,1283,3,250,125,0,1283,1284,5,13,0,0,1284,1286,1,0,0,0,1285,1279,1,
0,0,0,1285,1280,1,0,0,0,1285,1281,1,0,0,0,1286,269,1,0,0,0,1287,1288,3,328,
164,0,1288,1289,5,14,0,0,1289,1290,3,272,136,0,1290,1291,5,15,0,0,1291,1292,
5,16,0,0,1292,1293,3,266,133,0,1293,271,1,0,0,0,1294,1300,3,376,188,0,1295,
1296,3,376,188,0,1296,1297,5,2,0,0,1297,1298,3,272,136,0,1298,1300,1,0,0,
0,1299,1294,1,0,0,0,1299,1295,1,0,0,0,1300,273,1,0,0,0,1301,1305,3,276,138,
0,1302,1305,3,278,139,0,1303,1305,3,284,142,0,1304,1301,1,0,0,0,1304,1302,
1,0,0,0,1304,1303,1,0,0,0,1305,275,1,0,0,0,1306,1307,3,286,143,0,1307,277,
1,0,0,0,1308,1311,3,280,140,0,1309,1311,3,282,141,0,1310,1308,1,0,0,0,1310,
1309,1,0,0,0,1311,279,1,0,0,0,1312,1313,3,292,146,0,1313,281,1,0,0,0,1314,
1315,3,298,149,0,1315,1316,3,352,176,0,1316,1317,3,298,149,0,1317,283,1,
0,0,0,1318,1319,3,294,147,0,1319,285,1,0,0,0,1320,1327,3,358,179,0,1321,
1322,3,360,180,0,1322,1323,5,12,0,0,1323,1324,3,296,148,0,1324,1325,5,13,
0,0,1325,1327,1,0,0,0,1326,1320,1,0,0,0,1326,1321,1,0,0,0,1327,287,1,0,0,
0,1328,1331,3,374,187,0,1329,1331,3,290,145,0,1330,1328,1,0,0,0,1330,1329,
1,0,0,0,1331,289,1,0,0,0,1332,1333,3,292,146,0,1333,291,1,0,0,0,1334,1341,
3,362,181,0,1335,1336,3,364,182,0,1336,1337,5,12,0,0,1337,1338,3,296,148,
0,1338,1339,5,13,0,0,1339,1341,1,0,0,0,1340,1334,1,0,0,0,1340,1335,1,0,0,
0,1341,293,1,0,0,0,1342,1349,3,366,183,0,1343,1344,3,368,184,0,1344,1345,
5,12,0,0,1345,1346,3,296,148,0,1346,1347,5,13,0,0,1347,1349,1,0,0,0,1348,
1342,1,0,0,0,1348,1343,1,0,0,0,1349,295,1,0,0,0,1350,1356,3,298,149,0,1351,
1352,3,298,149,0,1352,1353,5,2,0,0,1353,1354,3,296,148,0,1354,1356,1,0,0,
0,1355,1350,1,0,0,0,1355,1351,1,0,0,0,1356,297,1,0,0,0,1357,1360,3,300,150,
0,1358,1360,3,376,188,0,1359,1357,1,0,0,0,1359,1358,1,0,0,0,1360,299,1,0,
0,0,1361,1365,3,286,143,0,1362,1365,3,288,144,0,1363,1365,3,294,147,0,1364,
1361,1,0,0,0,1364,1362,1,0,0,0,1364,1363,1,0,0,0,1365,301,1,0,0,0,1366,1367,
3,304,152,0,1367,1368,3,336,168,0,1368,1369,3,304,152,0,1369,1375,1,0,0,
0,1370,1371,5,12,0,0,1371,1372,3,302,151,0,1372,1373,5,13,0,0,1373,1375,
1,0,0,0,1374,1366,1,0,0,0,1374,1370,1,0,0,0,1375,303,1,0,0,0,1376,1382,5,
18,0,0,1377,1378,5,14,0,0,1378,1379,3,306,153,0,1379,1380,5,15,0,0,1380,
1382,1,0,0,0,1381,1376,1,0,0,0,1381,1377,1,0,0,0,1382,305,1,0,0,0,1383,1389,
3,250,125,0,1384,1385,3,250,125,0,1385,1386,5,2,0,0,1386,1387,3,306,153,
0,1387,1389,1,0,0,0,1388,1383,1,0,0,0,1388,1384,1,0,0,0,1389,307,1,0,0,0,
1390,1396,3,310,155,0,1391,1392,5,12,0,0,1392,1393,3,308,154,0,1393,1394,
5,13,0,0,1394,1396,1,0,0,0,1395,1390,1,0,0,0,1395,1391,1,0,0,0,1396,309,
1,0,0,0,1397,1398,6,155,-1,0,1398,1399,3,312,156,0,1399,1405,1,0,0,0,1400,
1401,10,1,0,0,1401,1402,5,66,0,0,1402,1404,3,312,156,0,1403,1400,1,0,0,0,
1404,1407,1,0,0,0,1405,1403,1,0,0,0,1405,1406,1,0,0,0,1406,311,1,0,0,0,1407,
1405,1,0,0,0,1408,1418,3,274,137,0,1409,1410,5,28,0,0,1410,1418,3,274,137,
0,1411,1412,5,28,0,0,1412,1413,5,12,0,0,1413,1414,3,274,137,0,1414,1415,
5,13,0,0,1415,1418,1,0,0,0,1416,1418,3,264,132,0,1417,1408,1,0,0,0,1417,
1409,1,0,0,0,1417,1411,1,0,0,0,1417,1416,1,0,0,0,1418,313,1,0,0,0,1419,1423,
3,328,164,0,1420,1423,3,320,160,0,1421,1423,3,318,159,0,1422,1419,1,0,0,
0,1422,1420,1,0,0,0,1422,1421,1,0,0,0,1423,315,1,0,0,0,1424,1427,3,334,167,
0,1425,1427,3,240,120,0,1426,1424,1,0,0,0,1426,1425,1,0,0,0,1427,317,1,0,
0,0,1428,1429,7,0,0,0,1429,319,1,0,0,0,1430,1431,7,1,0,0,1431,321,1,0,0,
0,1432,1433,5,33,0,0,1433,323,1,0,0,0,1434,1437,3,334,167,0,1435,1437,3,
240,120,0,1436,1434,1,0,0,0,1436,1435,1,0,0,0,1437,325,1,0,0,0,1438,1439,
3,328,164,0,1439,327,1,0,0,0,1440,1441,7,2,0,0,1441,329,1,0,0,0,1442,1450,
5,35,0,0,1443,1450,5,36,0,0,1444,1450,5,37,0,0,1445,1450,5,38,0,0,1446,1447,
5,28,0,0,1447,1450,5,66,0,0,1448,1450,5,39,0,0,1449,1442,1,0,0,0,1449,1443,
1,0,0,0,1449,1444,1,0,0,0,1449,1445,1,0,0,0,1449,1446,1,0,0,0,1449,1448,
1,0,0,0,1450,331,1,0,0,0,1451,1452,7,3,0,0,1452,333,1,0,0,0,1453,1454,5,
28,0,0,1454,335,1,0,0,0,1455,1456,5,40,0,0,1456,337,1,0,0,0,1457,1458,5,
41,0,0,1458,339,1,0,0,0,1459,1460,5,42,0,0,1460,341,1,0,0,0,1461,1462,3,
344,172,0,1462,343,1,0,0,0,1463,1464,3,408,204,0,1464,345,1,0,0,0,1465,1466,
3,410,205,0,1466,347,1,0,0,0,1467,1470,3,350,175,0,1468,1470,3,362,181,0,
1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,349,1,0,0,0,1471,1474,3,358,179,
0,1472,1474,3,366,183,0,1473,1471,1,0,0,0,1473,1472,1,0,0,0,1474,351,1,0,
0,0,1475,1476,3,354,177,0,1476,353,1,0,0,0,1477,1478,5,43,0,0,1478,355,1,
0,0,0,1479,1480,5,44,0,0,1480,357,1,0,0,0,1481,1482,3,360,180,0,1482,359,
1,0,0,0,1483,1484,3,408,204,0,1484,361,1,0,0,0,1485,1486,3,364,182,0,1486,
363,1,0,0,0,1487,1488,3,410,205,0,1488,365,1,0,0,0,1489,1490,3,368,184,0,
1490,367,1,0,0,0,1491,1492,3,412,206,0,1492,369,1,0,0,0,1493,1496,3,362,
181,0,1494,1496,3,366,183,0,1495,1493,1,0,0,0,1495,1494,1,0,0,0,1496,371,
1,0,0,0,1497,1498,7,4,0,0,1498,373,1,0,0,0,1499,1502,3,414,207,0,1500,1502,
5,61,0,0,1501,1499,1,0,0,0,1501,1500,1,0,0,0,1502,375,1,0,0,0,1503,1504,
5,64,0,0,1504,377,1,0,0,0,1505,1506,3,394,197,0,1506,379,1,0,0,0,1507,1508,
5,2,0,0,1508,1511,3,382,191,0,1509,1511,3,418,209,0,1510,1507,1,0,0,0,1510,
1509,1,0,0,0,1511,381,1,0,0,0,1512,1513,3,402,201,0,1513,383,1,0,0,0,1514,
1515,5,50,0,0,1515,1516,3,416,208,0,1516,1517,3,386,193,0,1517,1518,5,3,
0,0,1518,385,1,0,0,0,1519,1528,3,418,209,0,1520,1521,5,2,0,0,1521,1528,3,
388,194,0,1522,1523,5,2,0,0,1523,1524,3,388,194,0,1524,1525,5,2,0,0,1525,
1526,3,392,196,0,1526,1528,1,0,0,0,1527,1519,1,0,0,0,1527,1520,1,0,0,0,1527,
1522,1,0,0,0,1528,387,1,0,0,0,1529,1530,5,14,0,0,1530,1531,3,390,195,0,1531,
1532,5,15,0,0,1532,1535,1,0,0,0,1533,1535,5,67,0,0,1534,1529,1,0,0,0,1534,
1533,1,0,0,0,1535,389,1,0,0,0,1536,1542,3,406,203,0,1537,1538,3,406,203,
0,1538,1539,5,2,0,0,1539,1540,3,390,195,0,1540,1542,1,0,0,0,1541,1536,1,
0,0,0,1541,1537,1,0,0,0,1542,391,1,0,0,0,1543,1544,3,406,203,0,1544,393,
1,0,0,0,1545,1552,3,396,198,0,1546,1547,3,396,198,0,1547,1548,5,16,0,0,1548,
1549,3,394,197,0,1549,1552,1,0,0,0,1550,1552,3,402,201,0,1551,1545,1,0,0,
0,1551,1546,1,0,0,0,1551,1550,1,0,0,0,1552,395,1,0,0,0,1553,1560,3,408,204,
0,1554,1560,3,398,199,0,1555,1560,3,376,188,0,1556,1560,3,414,207,0,1557,
1560,5,61,0,0,1558,1560,3,400,200,0,1559,1553,1,0,0,0,1559,1554,1,0,0,0,
1559,1555,1,0,0,0,1559,1556,1,0,0,0,1559,1557,1,0,0,0,1559,1558,1,0,0,0,
1560,397,1,0,0,0,1561,1562,3,408,204,0,1562,1563,5,12,0,0,1563,1564,3,404,
202,0,1564,1565,5,13,0,0,1565,399,1,0,0,0,1566,1567,5,51,0,0,1567,1568,3,
24,12,0,1568,1569,5,13,0,0,1569,1587,1,0,0,0,1570,1571,5,52,0,0,1571,1572,
3,118,59,0,1572,1573,5,13,0,0,1573,1587,1,0,0,0,1574,1575,5,53,0,0,1575,
1576,3,248,124,0,1576,1577,5,13,0,0,1577,1587,1,0,0,0,1578,1579,5,54,0,0,
1579,1580,3,308,154,0,1580,1581,5,13,0,0,1581,1587,1,0,0,0,1582,1583,5,55,
0,0,1583,1584,3,298,149,0,1584,1585,5,13,0,0,1585,1587,1,0,0,0,1586,1566,
1,0,0,0,1586,1570,1,0,0,0,1586,1574,1,0,0,0,1586,1578,1,0,0,0,1586,1582,
1,0,0,0,1587,401,1,0,0,0,1588,1594,5,18,0,0,1589,1590,5,14,0,0,1590,1591,
3,404,202,0,1591,1592,5,15,0,0,1592,1594,1,0,0,0,1593,1588,1,0,0,0,1593,
1589,1,0,0,0,1594,403,1,0,0,0,1595,1601,3,394,197,0,1596,1597,3,394,197,
0,1597,1598,5,2,0,0,1598,1599,3,404,202,0,1599,1601,1,0,0,0,1600,1595,1,
0,0,0,1600,1596,1,0,0,0,1601,405,1,0,0,0,1602,1605,3,408,204,0,1603,1605,
5,78,0,0,1604,1602,1,0,0,0,1604,1603,1,0,0,0,1605,407,1,0,0,0,1606,1607,
7,5,0,0,1607,409,1,0,0,0,1608,1609,5,62,0,0,1609,411,1,0,0,0,1610,1611,5,
63,0,0,1611,413,1,0,0,0,1612,1613,7,6,0,0,1613,415,1,0,0,0,1614,1615,5,60,
0,0,1615,417,1,0,0,0,1616,1617,1,0,0,0,1617,419,1,0,0,0,122,423,430,438,
501,507,512,520,525,534,546,559,572,578,582,591,607,615,628,632,642,646,
667,674,681,692,700,707,714,731,740,750,755,764,774,786,799,817,825,829,
837,849,862,868,872,881,897,901,909,921,929,941,953,968,975,982,990,997,
1008,1018,1025,1032,1042,1046,1054,1069,1076,1091,1098,1114,1126,1150,1157,
1161,1175,1182,1186,1201,1205,1209,1220,1225,1229,1237,1249,1262,1269,1277,
1285,1299,1304,1310,1326,1330,1340,1348,1355,1359,1364,1374,1381,1388,1395,
1405,1417,1422,1426,1436,1449,1469,1473,1495,1501,1510,1527,1534,1541,1551,
1559,1586,1593,1600,1604];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class TPTPv9Parser extends antlr4.Parser {

    static grammarFileName = "TPTPv9.g4";
    static literalNames = [ null, "'tpi('", "','", "').'", "'thf('", "'tff('", 
                            "'tcf('", "'fof('", "'cnf('", "'-'", "'&'", 
                            "'@'", "'('", "')'", "'['", "']'", "':'", "'$let('", 
                            "'[]'", "'!>'", "'{'", "'}'", "')}'", "'[.]'", 
                            "'.'", "'{.}'", "'(.)'", "'!'", "'~'", "'?*'", 
                            "'^'", "'@+'", "'@-'", "'<<'", "'?'", "'<=>'", 
                            "'=>'", "'<='", "'<~>'", "'~&'", "'-->'", "':='", 
                            "'=='", "'='", "'!='", "'!!'", "'??'", "'@@+'", 
                            "'@@-'", "'@='", "'include('", "'$thf('", "'$tff('", 
                            "'$fof('", "'$cnf('", "'$fot('", null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'|'", "'*'", "'+'", "'>'", "'<'", "'#'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'''", null, null, "'\\\\'", 
                            null, null, null, "'.\\n'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             "WS", "Comment_line", "Comment_block", "Not_star_slash", 
                             "Single_quoted", "Distinct_object", "Dollar_word", 
                             "Dollar_dollar_word", "Upper_word", "Lower_word", 
                             "Vline", "Star", "Plus", "Arrow", "Less_sign", 
                             "Hash", "Real", "Signed_real", "Unsigned_real", 
                             "Rational", "Signed_rational", "Unsigned_rational", 
                             "Integer", "Signed_integer", "Unsigned_integer", 
                             "Decimal", "Positive_decimal", "Decimal_exponent", 
                             "Decimal_fraction", "Dot_decimal", "Exp_integer", 
                             "Signed_exp_integer", "Unsigned_exp_integer", 
                             "Slash", "Slosh", "Percentage_sign", "Double_quote", 
                             "Single_quote", "Dot", "Slash_char", "Slosh_char", 
                             "Zero_numeric", "Dollar", "Printable_char", 
                             "Viewable_char" ];
    static ruleNames = [ "tptp_file", "tptp_input", "annotated_formula", 
                         "tpi_annotated", "tpi_formula", "thf_annotated", 
                         "tff_annotated", "tcf_annotated", "fof_annotated", 
                         "cnf_annotated", "annotations", "formula_role", 
                         "thf_formula", "thf_logic_formula", "thf_binary_formula", 
                         "thf_binary_nonassoc", "thf_binary_assoc", "thf_or_formula", 
                         "thf_and_formula", "thf_apply_formula", "thf_unit_formula", 
                         "thf_preunit_formula", "thf_unitary_formula", "thf_quantified_formula", 
                         "thf_quantification", "thf_variable_list", "thf_typed_variable", 
                         "thf_unary_formula", "thf_prefix_unary", "thf_infix_unary", 
                         "thf_atomic_formula", "thf_plain_atomic", "thf_defined_atomic", 
                         "thf_defined_term", "thf_defined_infix", "thf_system_atomic", 
                         "thf_let", "thf_let_types", "thf_atom_typing_list", 
                         "thf_let_defns", "thf_let_defn", "thf_let_defn_list", 
                         "thf_unitary_term", "thf_conn_term", "thf_tuple", 
                         "thf_fof_function", "thf_arguments", "thf_formula_list", 
                         "thf_atom_typing", "thf_top_level_type", "thf_unitary_type", 
                         "thf_apply_type", "thf_binary_type", "thf_mapping_type", 
                         "thf_xprod_type", "thf_union_type", "thf_subtype", 
                         "thf_definition", "thf_sequent", "tff_formula", 
                         "tff_logic_formula", "tff_binary_formula", "tff_binary_nonassoc", 
                         "tff_binary_assoc", "tff_or_formula", "tff_and_formula", 
                         "tff_unit_formula", "tff_preunit_formula", "tff_unitary_formula", 
                         "txf_unitary_formula", "tff_quantified_formula", 
                         "tff_variable_list", "tff_variable", "tff_typed_variable", 
                         "tff_unary_formula", "tff_prefix_unary", "tff_infix_unary", 
                         "tff_atomic_formula", "tff_plain_atomic", "tff_defined_atomic", 
                         "tff_defined_plain", "tff_defined_infix", "tff_system_atomic", 
                         "txf_let", "txf_let_types", "tff_atom_typing_list", 
                         "txf_let_defns", "txf_let_defn", "txf_let_LHS", 
                         "txf_let_defn_list", "nxf_atom", "tff_term", "tff_unitary_term", 
                         "txf_tuple", "tff_arguments", "tff_atom_typing", 
                         "tff_top_level_type", "tff_non_atomic_type", "tf1_quantified_type", 
                         "tff_monotype", "tff_unitary_type", "tff_atomic_type", 
                         "tff_type_arguments", "tff_mapping_type", "tff_xprod_type", 
                         "txf_tuple_type", "tff_type_list", "tff_subtype", 
                         "txf_definition", "txf_sequent", "nhf_long_connective", 
                         "nhf_parameter_list", "nhf_parameter", "nhf_key_pair", 
                         "nxf_long_connective", "nxf_parameter_list", "nxf_parameter", 
                         "nxf_key_pair", "ntf_connective_name", "ntf_index", 
                         "ntf_short_connective", "tcf_formula", "tcf_logic_formula", 
                         "tcf_quantified_formula", "fof_formula", "fof_logic_formula", 
                         "fof_binary_formula", "fof_binary_nonassoc", "fof_binary_assoc", 
                         "fof_or_formula", "fof_and_formula", "fof_unary_formula", 
                         "fof_infix_unary", "fof_unit_formula", "fof_unitary_formula", 
                         "fof_quantified_formula", "fof_variable_list", 
                         "fof_atomic_formula", "fof_plain_atomic_formula", 
                         "fof_defined_atomic_formula", "fof_defined_plain_formula", 
                         "fof_defined_infix_formula", "fof_system_atomic_formula", 
                         "fof_plain_term", "fof_defined_term", "fof_defined_atomic_term", 
                         "fof_defined_plain_term", "fof_system_term", "fof_arguments", 
                         "fof_term", "fof_function_term", "fof_sequent", 
                         "fof_formula_tuple", "fof_formula_tuple_list", 
                         "cnf_formula", "cnf_disjunction", "cnf_literal", 
                         "thf_quantifier", "thf_unary_connective", "th1_quantifier", 
                         "th0_quantifier", "subtype_sign", "tff_unary_connective", 
                         "tff_quantifier", "fof_quantifier", "nonassoc_connective", 
                         "assoc_connective", "unary_connective", "gentzen_arrow", 
                         "assignment", "identical", "type_constant", "type_functor", 
                         "defined_type", "atom", "untyped_atom", "defined_infix_pred", 
                         "infix_equality", "infix_inequality", "constant", 
                         "functor", "defined_constant", "defined_functor", 
                         "system_constant", "system_functor", "def_or_sys_constant", 
                         "th1_defined_term", "defined_term", "variable", 
                         "source", "optional_info", "useful_info", "include", 
                         "include_optionals", "formula_selection", "name_list", 
                         "space_name", "general_term", "general_data", "general_function", 
                         "formula_data", "general_list", "general_terms", 
                         "name", "atomic_word", "atomic_defined_word", "atomic_system_word", 
                         "number", "file_name", "null" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = TPTPv9Parser.ruleNames;
        this.literalNames = TPTPv9Parser.literalNames;
        this.symbolicNames = TPTPv9Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 17:
    	    		return this.thf_or_formula_sempred(localctx, predIndex);
    	case 18:
    	    		return this.thf_and_formula_sempred(localctx, predIndex);
    	case 19:
    	    		return this.thf_apply_formula_sempred(localctx, predIndex);
    	case 54:
    	    		return this.thf_xprod_type_sempred(localctx, predIndex);
    	case 55:
    	    		return this.thf_union_type_sempred(localctx, predIndex);
    	case 64:
    	    		return this.tff_or_formula_sempred(localctx, predIndex);
    	case 65:
    	    		return this.tff_and_formula_sempred(localctx, predIndex);
    	case 104:
    	    		return this.tff_xprod_type_sempred(localctx, predIndex);
    	case 129:
    	    		return this.fof_or_formula_sempred(localctx, predIndex);
    	case 130:
    	    		return this.fof_and_formula_sempred(localctx, predIndex);
    	case 155:
    	    		return this.cnf_disjunction_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    thf_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_apply_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_union_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cnf_disjunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	tptp_file() {
	    let localctx = new Tptp_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, TPTPv9Parser.RULE_tptp_file);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 498) !== 0) || _la===50) {
	            this.state = 420;
	            this.tptp_input();
	            this.state = 425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 426;
	        this.match(TPTPv9Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tptp_input() {
	    let localctx = new Tptp_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, TPTPv9Parser.RULE_tptp_input);
	    try {
	        this.state = 430;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 428;
	            this.annotated_formula();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 429;
	            this.include();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotated_formula() {
	    let localctx = new Annotated_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, TPTPv9Parser.RULE_annotated_formula);
	    try {
	        this.state = 438;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 432;
	            this.thf_annotated();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 433;
	            this.tff_annotated();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 434;
	            this.tcf_annotated();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 435;
	            this.fof_annotated();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 436;
	            this.cnf_annotated();
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 437;
	            this.tpi_annotated();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_annotated() {
	    let localctx = new Tpi_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, TPTPv9Parser.RULE_tpi_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(TPTPv9Parser.T__0);
	        this.state = 441;
	        this.name();
	        this.state = 442;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 443;
	        this.formula_role();
	        this.state = 444;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 445;
	        this.tpi_formula();
	        this.state = 446;
	        this.annotations();
	        this.state = 447;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_formula() {
	    let localctx = new Tpi_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, TPTPv9Parser.RULE_tpi_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.fof_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_annotated() {
	    let localctx = new Thf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, TPTPv9Parser.RULE_thf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.match(TPTPv9Parser.T__3);
	        this.state = 452;
	        this.name();
	        this.state = 453;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 454;
	        this.formula_role();
	        this.state = 455;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 456;
	        this.thf_formula();
	        this.state = 457;
	        this.annotations();
	        this.state = 458;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_annotated() {
	    let localctx = new Tff_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, TPTPv9Parser.RULE_tff_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.match(TPTPv9Parser.T__4);
	        this.state = 461;
	        this.name();
	        this.state = 462;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 463;
	        this.formula_role();
	        this.state = 464;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 465;
	        this.tff_formula();
	        this.state = 466;
	        this.annotations();
	        this.state = 467;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_annotated() {
	    let localctx = new Tcf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, TPTPv9Parser.RULE_tcf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.match(TPTPv9Parser.T__5);
	        this.state = 470;
	        this.name();
	        this.state = 471;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 472;
	        this.formula_role();
	        this.state = 473;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 474;
	        this.tcf_formula();
	        this.state = 475;
	        this.annotations();
	        this.state = 476;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_annotated() {
	    let localctx = new Fof_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, TPTPv9Parser.RULE_fof_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this.match(TPTPv9Parser.T__6);
	        this.state = 479;
	        this.name();
	        this.state = 480;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 481;
	        this.formula_role();
	        this.state = 482;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 483;
	        this.fof_formula();
	        this.state = 484;
	        this.annotations();
	        this.state = 485;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_annotated() {
	    let localctx = new Cnf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, TPTPv9Parser.RULE_cnf_annotated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(TPTPv9Parser.T__7);
	        this.state = 488;
	        this.name();
	        this.state = 489;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 490;
	        this.formula_role();
	        this.state = 491;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 492;
	        this.cnf_formula();
	        this.state = 493;
	        this.annotations();
	        this.state = 494;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotations() {
	    let localctx = new AnnotationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, TPTPv9Parser.RULE_annotations);
	    try {
	        this.state = 501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 496;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 497;
	            this.source();
	            this.state = 498;
	            this.optional_info();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 500;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_role() {
	    let localctx = new Formula_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, TPTPv9Parser.RULE_formula_role);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 503;
	            this.match(TPTPv9Parser.Lower_word);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 504;
	            this.match(TPTPv9Parser.Lower_word);
	            this.state = 505;
	            this.match(TPTPv9Parser.T__8);
	            this.state = 506;
	            this.general_term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula() {
	    let localctx = new Thf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, TPTPv9Parser.RULE_thf_formula);
	    try {
	        this.state = 512;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 510;
	            this.thf_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 511;
	            this.thf_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_logic_formula() {
	    let localctx = new Thf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, TPTPv9Parser.RULE_thf_logic_formula);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 514;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 515;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 516;
	            this.thf_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 517;
	            this.thf_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 518;
	            this.thf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 519;
	            this.thf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_formula() {
	    let localctx = new Thf_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, TPTPv9Parser.RULE_thf_binary_formula);
	    try {
	        this.state = 525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 522;
	            this.thf_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 523;
	            this.thf_binary_assoc();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 524;
	            this.thf_binary_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_nonassoc() {
	    let localctx = new Thf_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, TPTPv9Parser.RULE_thf_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        this.thf_unit_formula();
	        this.state = 528;
	        this.nonassoc_connective();
	        this.state = 529;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_assoc() {
	    let localctx = new Thf_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, TPTPv9Parser.RULE_thf_binary_assoc);
	    try {
	        this.state = 534;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 531;
	            this.thf_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 532;
	            this.thf_and_formula(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 533;
	            this.thf_apply_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 34;
	    this.enterRecursionRule(localctx, 34, TPTPv9Parser.RULE_thf_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this.thf_unit_formula();
	        this.state = 538;
	        this.match(TPTPv9Parser.Vline);
	        this.state = 539;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 546;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_thf_or_formula);
	                this.state = 541;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 542;
	                this.match(TPTPv9Parser.Vline);
	                this.state = 543;
	                this.thf_unit_formula(); 
	            }
	            this.state = 548;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, TPTPv9Parser.RULE_thf_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.thf_unit_formula();
	        this.state = 551;
	        this.match(TPTPv9Parser.T__9);
	        this.state = 552;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 559;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_thf_and_formula);
	                this.state = 554;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 555;
	                this.match(TPTPv9Parser.T__9);
	                this.state = 556;
	                this.thf_unit_formula(); 
	            }
	            this.state = 561;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_apply_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_apply_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, TPTPv9Parser.RULE_thf_apply_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.thf_unit_formula();
	        this.state = 564;
	        this.match(TPTPv9Parser.T__10);
	        this.state = 565;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 572;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_apply_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_thf_apply_formula);
	                this.state = 567;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 568;
	                this.match(TPTPv9Parser.T__10);
	                this.state = 569;
	                this.thf_unit_formula(); 
	            }
	            this.state = 574;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_unit_formula() {
	    let localctx = new Thf_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, TPTPv9Parser.RULE_thf_unit_formula);
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 575;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 576;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 577;
	            this.thf_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_preunit_formula() {
	    let localctx = new Thf_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, TPTPv9Parser.RULE_thf_preunit_formula);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 71:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            this.thf_unitary_formula();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 581;
	            this.thf_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_formula() {
	    let localctx = new Thf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, TPTPv9Parser.RULE_thf_unitary_formula);
	    try {
	        this.state = 591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 584;
	            this.thf_quantified_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 585;
	            this.thf_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 586;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 587;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 588;
	            this.thf_logic_formula();
	            this.state = 589;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantified_formula() {
	    let localctx = new Thf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, TPTPv9Parser.RULE_thf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.thf_quantification();
	        this.state = 594;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantification() {
	    let localctx = new Thf_quantificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, TPTPv9Parser.RULE_thf_quantification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.thf_quantifier();
	        this.state = 597;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 598;
	        this.thf_variable_list();
	        this.state = 599;
	        this.match(TPTPv9Parser.T__14);
	        this.state = 600;
	        this.match(TPTPv9Parser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_variable_list() {
	    let localctx = new Thf_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, TPTPv9Parser.RULE_thf_variable_list);
	    try {
	        this.state = 607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 602;
	            this.thf_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 603;
	            this.thf_typed_variable();
	            this.state = 604;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 605;
	            this.thf_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_typed_variable() {
	    let localctx = new Thf_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, TPTPv9Parser.RULE_thf_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.variable();
	        this.state = 610;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 611;
	        this.thf_top_level_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unary_formula() {
	    let localctx = new Thf_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, TPTPv9Parser.RULE_thf_unary_formula);
	    try {
	        this.state = 615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 613;
	            this.thf_prefix_unary();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 614;
	            this.thf_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_prefix_unary() {
	    let localctx = new Thf_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, TPTPv9Parser.RULE_thf_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.thf_unary_connective();
	        this.state = 618;
	        this.thf_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_infix_unary() {
	    let localctx = new Thf_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, TPTPv9Parser.RULE_thf_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.thf_unitary_term();
	        this.state = 621;
	        this.infix_inequality();
	        this.state = 622;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atomic_formula() {
	    let localctx = new Thf_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, TPTPv9Parser.RULE_thf_atomic_formula);
	    try {
	        this.state = 628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.thf_plain_atomic();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.thf_defined_atomic();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 626;
	            this.thf_system_atomic();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 627;
	            this.thf_fof_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_plain_atomic() {
	    let localctx = new Thf_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, TPTPv9Parser.RULE_thf_plain_atomic);
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            this.constant();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 631;
	            this.thf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_atomic() {
	    let localctx = new Thf_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, TPTPv9Parser.RULE_thf_defined_atomic);
	    try {
	        this.state = 642;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 634;
	            this.defined_constant();
	            break;
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 61:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 635;
	            this.thf_defined_term();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 636;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 637;
	            this.thf_conn_term();
	            this.state = 638;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 640;
	            this.nhf_long_connective();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 641;
	            this.thf_let();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_term() {
	    let localctx = new Thf_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, TPTPv9Parser.RULE_thf_defined_term);
	    try {
	        this.state = 646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 644;
	            this.defined_term();
	            break;
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 645;
	            this.th1_defined_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_infix() {
	    let localctx = new Thf_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, TPTPv9Parser.RULE_thf_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.thf_unitary_term();
	        this.state = 649;
	        this.defined_infix_pred();
	        this.state = 650;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_system_atomic() {
	    let localctx = new Thf_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, TPTPv9Parser.RULE_thf_system_atomic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.system_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let() {
	    let localctx = new Thf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, TPTPv9Parser.RULE_thf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.match(TPTPv9Parser.T__16);
	        this.state = 655;
	        this.thf_let_types();
	        this.state = 656;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 657;
	        this.thf_let_defns();
	        this.state = 658;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 659;
	        this.thf_logic_formula();
	        this.state = 660;
	        this.match(TPTPv9Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_types() {
	    let localctx = new Thf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, TPTPv9Parser.RULE_thf_let_types);
	    try {
	        this.state = 667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 60:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.thf_atom_typing();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 664;
	            this.thf_atom_typing_list();
	            this.state = 665;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing_list() {
	    let localctx = new Thf_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, TPTPv9Parser.RULE_thf_atom_typing_list);
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 669;
	            this.thf_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 670;
	            this.thf_atom_typing();
	            this.state = 671;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 672;
	            this.thf_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defns() {
	    let localctx = new Thf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, TPTPv9Parser.RULE_thf_let_defns);
	    try {
	        this.state = 681;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 676;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 677;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 678;
	            this.thf_let_defn_list();
	            this.state = 679;
	            this.match(TPTPv9Parser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn() {
	    let localctx = new Thf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, TPTPv9Parser.RULE_thf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.thf_logic_formula();
	        this.state = 684;
	        this.assignment();
	        this.state = 685;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn_list() {
	    let localctx = new Thf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, TPTPv9Parser.RULE_thf_let_defn_list);
	    try {
	        this.state = 692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 687;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 688;
	            this.thf_let_defn();
	            this.state = 689;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 690;
	            this.thf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_term() {
	    let localctx = new Thf_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, TPTPv9Parser.RULE_thf_unitary_term);
	    try {
	        this.state = 700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 694;
	            this.thf_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 695;
	            this.variable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 696;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 697;
	            this.thf_logic_formula();
	            this.state = 698;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_conn_term() {
	    let localctx = new Thf_conn_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, TPTPv9Parser.RULE_thf_conn_term);
	    try {
	        this.state = 707;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 702;
	            this.nonassoc_connective();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 703;
	            this.assoc_connective();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 704;
	            this.infix_equality();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 705;
	            this.infix_inequality();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 706;
	            this.thf_unary_connective();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_tuple() {
	    let localctx = new Thf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, TPTPv9Parser.RULE_thf_tuple);
	    try {
	        this.state = 714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 709;
	            this.match(TPTPv9Parser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 710;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 711;
	            this.thf_formula_list();
	            this.state = 712;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_fof_function() {
	    let localctx = new Thf_fof_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, TPTPv9Parser.RULE_thf_fof_function);
	    try {
	        this.state = 731;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 716;
	            this.functor();
	            this.state = 717;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 718;
	            this.thf_arguments();
	            this.state = 719;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 721;
	            this.defined_functor();
	            this.state = 722;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 723;
	            this.thf_arguments();
	            this.state = 724;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 726;
	            this.system_functor();
	            this.state = 727;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 728;
	            this.thf_arguments();
	            this.state = 729;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_arguments() {
	    let localctx = new Thf_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, TPTPv9Parser.RULE_thf_arguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this.thf_formula_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula_list() {
	    let localctx = new Thf_formula_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, TPTPv9Parser.RULE_thf_formula_list);
	    try {
	        this.state = 740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 735;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 736;
	            this.thf_logic_formula();
	            this.state = 737;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 738;
	            this.thf_formula_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing() {
	    let localctx = new Thf_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, TPTPv9Parser.RULE_thf_atom_typing);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            this.untyped_atom();
	            this.state = 743;
	            this.match(TPTPv9Parser.T__15);
	            this.state = 744;
	            this.thf_top_level_type();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 746;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 747;
	            this.thf_atom_typing();
	            this.state = 748;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_top_level_type() {
	    let localctx = new Thf_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, TPTPv9Parser.RULE_thf_top_level_type);
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 753;
	            this.thf_mapping_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 754;
	            this.thf_apply_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_type() {
	    let localctx = new Thf_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, TPTPv9Parser.RULE_thf_unitary_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.thf_unitary_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_apply_type() {
	    let localctx = new Thf_apply_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, TPTPv9Parser.RULE_thf_apply_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.thf_apply_formula(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_type() {
	    let localctx = new Thf_binary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, TPTPv9Parser.RULE_thf_binary_type);
	    try {
	        this.state = 764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 761;
	            this.thf_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 762;
	            this.thf_xprod_type(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 763;
	            this.thf_union_type(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_mapping_type() {
	    let localctx = new Thf_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, TPTPv9Parser.RULE_thf_mapping_type);
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 766;
	            this.thf_unitary_type();
	            this.state = 767;
	            this.match(TPTPv9Parser.Arrow);
	            this.state = 768;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 770;
	            this.thf_unitary_type();
	            this.state = 771;
	            this.match(TPTPv9Parser.Arrow);
	            this.state = 772;
	            this.thf_mapping_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 108;
	    this.enterRecursionRule(localctx, 108, TPTPv9Parser.RULE_thf_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 777;
	        this.thf_unitary_type();
	        this.state = 778;
	        this.match(TPTPv9Parser.Star);
	        this.state = 779;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 786;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_thf_xprod_type);
	                this.state = 781;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 782;
	                this.match(TPTPv9Parser.Star);
	                this.state = 783;
	                this.thf_unitary_type(); 
	            }
	            this.state = 788;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_union_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_union_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 110;
	    this.enterRecursionRule(localctx, 110, TPTPv9Parser.RULE_thf_union_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.thf_unitary_type();
	        this.state = 791;
	        this.match(TPTPv9Parser.Plus);
	        this.state = 792;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_union_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_thf_union_type);
	                this.state = 794;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 795;
	                this.match(TPTPv9Parser.Plus);
	                this.state = 796;
	                this.thf_unitary_type(); 
	            }
	            this.state = 801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_subtype() {
	    let localctx = new Thf_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, TPTPv9Parser.RULE_thf_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this.untyped_atom();
	        this.state = 803;
	        this.subtype_sign();
	        this.state = 804;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_definition() {
	    let localctx = new Thf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, TPTPv9Parser.RULE_thf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 806;
	        this.thf_atomic_formula();
	        this.state = 807;
	        this.identical();
	        this.state = 808;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_sequent() {
	    let localctx = new Thf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, TPTPv9Parser.RULE_thf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.thf_tuple();
	        this.state = 811;
	        this.gentzen_arrow();
	        this.state = 812;
	        this.thf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_formula() {
	    let localctx = new Tff_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, TPTPv9Parser.RULE_tff_formula);
	    try {
	        this.state = 817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 814;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 815;
	            this.tff_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 816;
	            this.tff_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_logic_formula() {
	    let localctx = new Tff_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, TPTPv9Parser.RULE_tff_logic_formula);
	    try {
	        this.state = 825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 819;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 820;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 821;
	            this.tff_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 822;
	            this.tff_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 823;
	            this.txf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 824;
	            this.txf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_formula() {
	    let localctx = new Tff_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, TPTPv9Parser.RULE_tff_binary_formula);
	    try {
	        this.state = 829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 827;
	            this.tff_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 828;
	            this.tff_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_nonassoc() {
	    let localctx = new Tff_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, TPTPv9Parser.RULE_tff_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.tff_unit_formula();
	        this.state = 832;
	        this.nonassoc_connective();
	        this.state = 833;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_assoc() {
	    let localctx = new Tff_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, TPTPv9Parser.RULE_tff_binary_assoc);
	    try {
	        this.state = 837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.tff_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.tff_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 128;
	    this.enterRecursionRule(localctx, 128, TPTPv9Parser.RULE_tff_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.tff_unit_formula();
	        this.state = 841;
	        this.match(TPTPv9Parser.Vline);
	        this.state = 842;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 849;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_tff_or_formula);
	                this.state = 844;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 845;
	                this.match(TPTPv9Parser.Vline);
	                this.state = 846;
	                this.tff_unit_formula(); 
	            }
	            this.state = 851;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	tff_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, TPTPv9Parser.RULE_tff_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 853;
	        this.tff_unit_formula();
	        this.state = 854;
	        this.match(TPTPv9Parser.T__9);
	        this.state = 855;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 862;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_tff_and_formula);
	                this.state = 857;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 858;
	                this.match(TPTPv9Parser.T__9);
	                this.state = 859;
	                this.tff_unit_formula(); 
	            }
	            this.state = 864;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tff_unit_formula() {
	    let localctx = new Tff_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, TPTPv9Parser.RULE_tff_unit_formula);
	    try {
	        this.state = 868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 865;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 866;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 867;
	            this.tff_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_preunit_formula() {
	    let localctx = new Tff_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, TPTPv9Parser.RULE_tff_preunit_formula);
	    try {
	        this.state = 872;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 17:
	        case 20:
	        case 27:
	        case 34:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 870;
	            this.tff_unitary_formula();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 871;
	            this.tff_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_formula() {
	    let localctx = new Tff_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, TPTPv9Parser.RULE_tff_unitary_formula);
	    try {
	        this.state = 881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 874;
	            this.tff_quantified_formula();
	            break;
	        case 17:
	        case 20:
	        case 60:
	        case 62:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 875;
	            this.tff_atomic_formula();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 876;
	            this.txf_unitary_formula();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 877;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 878;
	            this.tff_logic_formula();
	            this.state = 879;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_unitary_formula() {
	    let localctx = new Txf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, TPTPv9Parser.RULE_txf_unitary_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_quantified_formula() {
	    let localctx = new Tff_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, TPTPv9Parser.RULE_tff_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 885;
	        this.tff_quantifier();
	        this.state = 886;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 887;
	        this.tff_variable_list();
	        this.state = 888;
	        this.match(TPTPv9Parser.T__14);
	        this.state = 889;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 890;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable_list() {
	    let localctx = new Tff_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, TPTPv9Parser.RULE_tff_variable_list);
	    try {
	        this.state = 897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 892;
	            this.tff_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 893;
	            this.tff_variable();
	            this.state = 894;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 895;
	            this.tff_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable() {
	    let localctx = new Tff_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, TPTPv9Parser.RULE_tff_variable);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 899;
	            this.tff_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.variable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_typed_variable() {
	    let localctx = new Tff_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, TPTPv9Parser.RULE_tff_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.variable();
	        this.state = 904;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 905;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unary_formula() {
	    let localctx = new Tff_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, TPTPv9Parser.RULE_tff_unary_formula);
	    try {
	        this.state = 909;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 28:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 907;
	            this.tff_prefix_unary();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 908;
	            this.tff_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_prefix_unary() {
	    let localctx = new Tff_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, TPTPv9Parser.RULE_tff_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 911;
	        this.tff_unary_connective();
	        this.state = 912;
	        this.tff_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_infix_unary() {
	    let localctx = new Tff_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, TPTPv9Parser.RULE_tff_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.tff_unitary_term();
	        this.state = 915;
	        this.infix_inequality();
	        this.state = 916;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_formula() {
	    let localctx = new Tff_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, TPTPv9Parser.RULE_tff_atomic_formula);
	    try {
	        this.state = 921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 918;
	            this.tff_plain_atomic();
	            break;
	        case 17:
	        case 20:
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 919;
	            this.tff_defined_atomic();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 920;
	            this.tff_system_atomic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_plain_atomic() {
	    let localctx = new Tff_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, TPTPv9Parser.RULE_tff_plain_atomic);
	    try {
	        this.state = 929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 923;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 924;
	            this.functor();
	            this.state = 925;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 926;
	            this.tff_arguments();
	            this.state = 927;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_atomic() {
	    let localctx = new Tff_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, TPTPv9Parser.RULE_tff_defined_atomic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        this.tff_defined_plain();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_plain() {
	    let localctx = new Tff_defined_plainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, TPTPv9Parser.RULE_tff_defined_plain);
	    try {
	        this.state = 941;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 933;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 934;
	            this.defined_functor();
	            this.state = 935;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 936;
	            this.tff_arguments();
	            this.state = 937;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 939;
	            this.nxf_atom();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 940;
	            this.txf_let();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_infix() {
	    let localctx = new Tff_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, TPTPv9Parser.RULE_tff_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.tff_unitary_term();
	        this.state = 944;
	        this.defined_infix_pred();
	        this.state = 945;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_system_atomic() {
	    let localctx = new Tff_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, TPTPv9Parser.RULE_tff_system_atomic);
	    try {
	        this.state = 953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 947;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 948;
	            this.system_functor();
	            this.state = 949;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 950;
	            this.tff_arguments();
	            this.state = 951;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let() {
	    let localctx = new Txf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, TPTPv9Parser.RULE_txf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 955;
	        this.match(TPTPv9Parser.T__16);
	        this.state = 956;
	        this.txf_let_types();
	        this.state = 957;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 958;
	        this.txf_let_defns();
	        this.state = 959;
	        this.match(TPTPv9Parser.T__1);
	        this.state = 960;
	        this.tff_term();
	        this.state = 961;
	        this.match(TPTPv9Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_types() {
	    let localctx = new Txf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, TPTPv9Parser.RULE_txf_let_types);
	    try {
	        this.state = 968;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 60:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 963;
	            this.tff_atom_typing();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 964;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 965;
	            this.tff_atom_typing_list();
	            this.state = 966;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing_list() {
	    let localctx = new Tff_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, TPTPv9Parser.RULE_tff_atom_typing_list);
	    try {
	        this.state = 975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 970;
	            this.tff_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 971;
	            this.tff_atom_typing();
	            this.state = 972;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 973;
	            this.tff_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defns() {
	    let localctx = new Txf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, TPTPv9Parser.RULE_txf_let_defns);
	    try {
	        this.state = 982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 977;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 978;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 979;
	            this.txf_let_defn_list();
	            this.state = 980;
	            this.match(TPTPv9Parser.T__14);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn() {
	    let localctx = new Txf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, TPTPv9Parser.RULE_txf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.txf_let_LHS();
	        this.state = 985;
	        this.assignment();
	        this.state = 986;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_LHS() {
	    let localctx = new Txf_let_LHSContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, TPTPv9Parser.RULE_txf_let_LHS);
	    try {
	        this.state = 990;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.tff_plain_atomic();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.txf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn_list() {
	    let localctx = new Txf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, TPTPv9Parser.RULE_txf_let_defn_list);
	    try {
	        this.state = 997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 992;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 993;
	            this.txf_let_defn();
	            this.state = 994;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 995;
	            this.txf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_atom() {
	    let localctx = new Nxf_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, TPTPv9Parser.RULE_nxf_atom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.nxf_long_connective();
	        this.state = 1000;
	        this.match(TPTPv9Parser.T__10);
	        this.state = 1001;
	        this.match(TPTPv9Parser.T__11);
	        this.state = 1002;
	        this.tff_arguments();
	        this.state = 1003;
	        this.match(TPTPv9Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_term() {
	    let localctx = new Tff_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, TPTPv9Parser.RULE_tff_term);
	    try {
	        this.state = 1008;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1005;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1006;
	            this.defined_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1007;
	            this.txf_tuple();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_term() {
	    let localctx = new Tff_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, TPTPv9Parser.RULE_tff_unitary_term);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	        case 20:
	        case 60:
	        case 62:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1010;
	            this.tff_atomic_formula();
	            break;
	        case 61:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1011;
	            this.defined_term();
	            break;
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1012;
	            this.txf_tuple();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1013;
	            this.variable();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1014;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1015;
	            this.tff_logic_formula();
	            this.state = 1016;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_tuple() {
	    let localctx = new Txf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, TPTPv9Parser.RULE_txf_tuple);
	    try {
	        this.state = 1025;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1020;
	            this.match(TPTPv9Parser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1021;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 1022;
	            this.tff_arguments();
	            this.state = 1023;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_arguments() {
	    let localctx = new Tff_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, TPTPv9Parser.RULE_tff_arguments);
	    try {
	        this.state = 1032;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1027;
	            this.tff_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1028;
	            this.tff_term();
	            this.state = 1029;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1030;
	            this.tff_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing() {
	    let localctx = new Tff_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, TPTPv9Parser.RULE_tff_atom_typing);
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1034;
	            this.untyped_atom();
	            this.state = 1035;
	            this.match(TPTPv9Parser.T__15);
	            this.state = 1036;
	            this.tff_top_level_type();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1039;
	            this.tff_atom_typing();
	            this.state = 1040;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_top_level_type() {
	    let localctx = new Tff_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, TPTPv9Parser.RULE_tff_top_level_type);
	    try {
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1044;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1045;
	            this.tff_non_atomic_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_non_atomic_type() {
	    let localctx = new Tff_non_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, TPTPv9Parser.RULE_tff_non_atomic_type);
	    try {
	        this.state = 1054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1048;
	            this.tff_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1049;
	            this.tf1_quantified_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1050;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1051;
	            this.tff_non_atomic_type();
	            this.state = 1052;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tf1_quantified_type() {
	    let localctx = new Tf1_quantified_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, TPTPv9Parser.RULE_tf1_quantified_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.match(TPTPv9Parser.T__18);
	        this.state = 1057;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 1058;
	        this.tff_variable_list();
	        this.state = 1059;
	        this.match(TPTPv9Parser.T__14);
	        this.state = 1060;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 1061;
	        this.tff_monotype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_monotype() {
	    let localctx = new Tff_monotypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, TPTPv9Parser.RULE_tff_monotype);
	    try {
	        this.state = 1069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1063;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1064;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1065;
	            this.tff_mapping_type();
	            this.state = 1066;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1068;
	            this.tf1_quantified_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_type() {
	    let localctx = new Tff_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, TPTPv9Parser.RULE_tff_unitary_type);
	    try {
	        this.state = 1076;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1071;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1072;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1073;
	            this.tff_xprod_type(0);
	            this.state = 1074;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_type() {
	    let localctx = new Tff_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, TPTPv9Parser.RULE_tff_atomic_type);
	    try {
	        this.state = 1091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1078;
	            this.type_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1079;
	            this.defined_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1080;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1081;
	            this.type_functor();
	            this.state = 1082;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1083;
	            this.tff_type_arguments();
	            this.state = 1084;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1086;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1087;
	            this.tff_atomic_type();
	            this.state = 1088;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1090;
	            this.txf_tuple_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_arguments() {
	    let localctx = new Tff_type_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, TPTPv9Parser.RULE_tff_type_arguments);
	    try {
	        this.state = 1098;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1093;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1094;
	            this.tff_atomic_type();
	            this.state = 1095;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1096;
	            this.tff_type_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_mapping_type() {
	    let localctx = new Tff_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, TPTPv9Parser.RULE_tff_mapping_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1100;
	        this.tff_unitary_type();
	        this.state = 1101;
	        this.match(TPTPv9Parser.Arrow);
	        this.state = 1102;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 208;
	    this.enterRecursionRule(localctx, 208, TPTPv9Parser.RULE_tff_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this.tff_unitary_type();
	        this.state = 1106;
	        this.match(TPTPv9Parser.Star);
	        this.state = 1107;
	        this.tff_atomic_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1114;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_tff_xprod_type);
	                this.state = 1109;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1110;
	                this.match(TPTPv9Parser.Star);
	                this.state = 1111;
	                this.tff_atomic_type(); 
	            }
	            this.state = 1116;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	txf_tuple_type() {
	    let localctx = new Txf_tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, TPTPv9Parser.RULE_txf_tuple_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 1118;
	        this.tff_type_list();
	        this.state = 1119;
	        this.match(TPTPv9Parser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_list() {
	    let localctx = new Tff_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, TPTPv9Parser.RULE_tff_type_list);
	    try {
	        this.state = 1126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1121;
	            this.tff_top_level_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1122;
	            this.tff_top_level_type();
	            this.state = 1123;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1124;
	            this.tff_type_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_subtype() {
	    let localctx = new Tff_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, TPTPv9Parser.RULE_tff_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1128;
	        this.untyped_atom();
	        this.state = 1129;
	        this.subtype_sign();
	        this.state = 1130;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_definition() {
	    let localctx = new Txf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, TPTPv9Parser.RULE_txf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1132;
	        this.tff_atomic_formula();
	        this.state = 1133;
	        this.identical();
	        this.state = 1134;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_sequent() {
	    let localctx = new Txf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, TPTPv9Parser.RULE_txf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        this.txf_tuple();
	        this.state = 1137;
	        this.gentzen_arrow();
	        this.state = 1138;
	        this.txf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_long_connective() {
	    let localctx = new Nhf_long_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, TPTPv9Parser.RULE_nhf_long_connective);
	    try {
	        this.state = 1150;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1140;
	            this.match(TPTPv9Parser.T__19);
	            this.state = 1141;
	            this.ntf_connective_name();
	            this.state = 1142;
	            this.match(TPTPv9Parser.T__20);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1144;
	            this.match(TPTPv9Parser.T__19);
	            this.state = 1145;
	            this.ntf_connective_name();
	            this.state = 1146;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1147;
	            this.nhf_parameter_list();
	            this.state = 1148;
	            this.match(TPTPv9Parser.T__21);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_parameter_list() {
	    let localctx = new Nhf_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, TPTPv9Parser.RULE_nhf_parameter_list);
	    try {
	        this.state = 1157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1152;
	            this.nhf_parameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1153;
	            this.nhf_parameter();
	            this.state = 1154;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1155;
	            this.nhf_parameter_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_parameter() {
	    let localctx = new Nhf_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, TPTPv9Parser.RULE_nhf_parameter);
	    try {
	        this.state = 1161;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1159;
	            this.ntf_index();
	            break;
	        case 12:
	        case 14:
	        case 17:
	        case 18:
	        case 20:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1160;
	            this.nhf_key_pair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nhf_key_pair() {
	    let localctx = new Nhf_key_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, TPTPv9Parser.RULE_nhf_key_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1163;
	        this.thf_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_long_connective() {
	    let localctx = new Nxf_long_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, TPTPv9Parser.RULE_nxf_long_connective);
	    try {
	        this.state = 1175;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1165;
	            this.match(TPTPv9Parser.T__19);
	            this.state = 1166;
	            this.ntf_connective_name();
	            this.state = 1167;
	            this.match(TPTPv9Parser.T__20);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1169;
	            this.match(TPTPv9Parser.T__19);
	            this.state = 1170;
	            this.ntf_connective_name();
	            this.state = 1171;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1172;
	            this.nxf_parameter_list();
	            this.state = 1173;
	            this.match(TPTPv9Parser.T__21);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_parameter_list() {
	    let localctx = new Nxf_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, TPTPv9Parser.RULE_nxf_parameter_list);
	    try {
	        this.state = 1182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1177;
	            this.nxf_parameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1178;
	            this.nxf_parameter();
	            this.state = 1179;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1180;
	            this.nxf_parameter_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_parameter() {
	    let localctx = new Nxf_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, TPTPv9Parser.RULE_nxf_parameter);
	    try {
	        this.state = 1186;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1184;
	            this.ntf_index();
	            break;
	        case 17:
	        case 20:
	        case 60:
	        case 62:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1185;
	            this.nxf_key_pair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nxf_key_pair() {
	    let localctx = new Nxf_key_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, TPTPv9Parser.RULE_nxf_key_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        this.txf_definition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_connective_name() {
	    let localctx = new Ntf_connective_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, TPTPv9Parser.RULE_ntf_connective_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.def_or_sys_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_index() {
	    let localctx = new Ntf_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, TPTPv9Parser.RULE_ntf_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        this.match(TPTPv9Parser.Hash);
	        this.state = 1193;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_short_connective() {
	    let localctx = new Ntf_short_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, TPTPv9Parser.RULE_ntf_short_connective);
	    try {
	        this.state = 1201;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1195;
	            this.match(TPTPv9Parser.T__22);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1196;
	            this.match(TPTPv9Parser.Less_sign);
	            this.state = 1197;
	            this.match(TPTPv9Parser.T__23);
	            this.state = 1198;
	            this.match(TPTPv9Parser.Arrow);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1199;
	            this.match(TPTPv9Parser.T__24);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1200;
	            this.match(TPTPv9Parser.T__25);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_formula() {
	    let localctx = new Tcf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, TPTPv9Parser.RULE_tcf_formula);
	    try {
	        this.state = 1205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1203;
	            this.tcf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1204;
	            this.tff_atom_typing();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_logic_formula() {
	    let localctx = new Tcf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, TPTPv9Parser.RULE_tcf_logic_formula);
	    try {
	        this.state = 1209;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1207;
	            this.tcf_quantified_formula();
	            break;
	        case 12:
	        case 28:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1208;
	            this.cnf_formula();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_quantified_formula() {
	    let localctx = new Tcf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, TPTPv9Parser.RULE_tcf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this.match(TPTPv9Parser.T__26);
	        this.state = 1212;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 1213;
	        this.tff_variable_list();
	        this.state = 1214;
	        this.match(TPTPv9Parser.T__14);
	        this.state = 1215;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 1216;
	        this.tcf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula() {
	    let localctx = new Fof_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, TPTPv9Parser.RULE_fof_formula);
	    try {
	        this.state = 1220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1218;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1219;
	            this.fof_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_logic_formula() {
	    let localctx = new Fof_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, TPTPv9Parser.RULE_fof_logic_formula);
	    try {
	        this.state = 1225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1222;
	            this.fof_binary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this.fof_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1224;
	            this.fof_unitary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_formula() {
	    let localctx = new Fof_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, TPTPv9Parser.RULE_fof_binary_formula);
	    try {
	        this.state = 1229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1227;
	            this.fof_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1228;
	            this.fof_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_nonassoc() {
	    let localctx = new Fof_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, TPTPv9Parser.RULE_fof_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1231;
	        this.fof_unit_formula();
	        this.state = 1232;
	        this.nonassoc_connective();
	        this.state = 1233;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_assoc() {
	    let localctx = new Fof_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, TPTPv9Parser.RULE_fof_binary_assoc);
	    try {
	        this.state = 1237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.fof_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1236;
	            this.fof_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	fof_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 258;
	    this.enterRecursionRule(localctx, 258, TPTPv9Parser.RULE_fof_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this.fof_unit_formula();
	        this.state = 1241;
	        this.match(TPTPv9Parser.Vline);
	        this.state = 1242;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1249;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_fof_or_formula);
	                this.state = 1244;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1245;
	                this.match(TPTPv9Parser.Vline);
	                this.state = 1246;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1251;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	fof_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, TPTPv9Parser.RULE_fof_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.fof_unit_formula();
	        this.state = 1254;
	        this.match(TPTPv9Parser.T__9);
	        this.state = 1255;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_fof_and_formula);
	                this.state = 1257;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1258;
	                this.match(TPTPv9Parser.T__9);
	                this.state = 1259;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	fof_unary_formula() {
	    let localctx = new Fof_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, TPTPv9Parser.RULE_fof_unary_formula);
	    try {
	        this.state = 1269;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1265;
	            this.unary_connective();
	            this.state = 1266;
	            this.fof_unit_formula();
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1268;
	            this.fof_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_infix_unary() {
	    let localctx = new Fof_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, TPTPv9Parser.RULE_fof_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this.fof_term();
	        this.state = 1272;
	        this.infix_inequality();
	        this.state = 1273;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unit_formula() {
	    let localctx = new Fof_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, TPTPv9Parser.RULE_fof_unit_formula);
	    try {
	        this.state = 1277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1275;
	            this.fof_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1276;
	            this.fof_unary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unitary_formula() {
	    let localctx = new Fof_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, TPTPv9Parser.RULE_fof_unitary_formula);
	    try {
	        this.state = 1285;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1279;
	            this.fof_quantified_formula();
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1280;
	            this.fof_atomic_formula();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1281;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1282;
	            this.fof_logic_formula();
	            this.state = 1283;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantified_formula() {
	    let localctx = new Fof_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, TPTPv9Parser.RULE_fof_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1287;
	        this.fof_quantifier();
	        this.state = 1288;
	        this.match(TPTPv9Parser.T__13);
	        this.state = 1289;
	        this.fof_variable_list();
	        this.state = 1290;
	        this.match(TPTPv9Parser.T__14);
	        this.state = 1291;
	        this.match(TPTPv9Parser.T__15);
	        this.state = 1292;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_variable_list() {
	    let localctx = new Fof_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, TPTPv9Parser.RULE_fof_variable_list);
	    try {
	        this.state = 1299;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1294;
	            this.variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1295;
	            this.variable();
	            this.state = 1296;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1297;
	            this.fof_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_atomic_formula() {
	    let localctx = new Fof_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, TPTPv9Parser.RULE_fof_atomic_formula);
	    try {
	        this.state = 1304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1301;
	            this.fof_plain_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.fof_defined_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1303;
	            this.fof_system_atomic_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_atomic_formula() {
	    let localctx = new Fof_plain_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, TPTPv9Parser.RULE_fof_plain_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this.fof_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_formula() {
	    let localctx = new Fof_defined_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, TPTPv9Parser.RULE_fof_defined_atomic_formula);
	    try {
	        this.state = 1310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1308;
	            this.fof_defined_plain_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1309;
	            this.fof_defined_infix_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_formula() {
	    let localctx = new Fof_defined_plain_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, TPTPv9Parser.RULE_fof_defined_plain_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_infix_formula() {
	    let localctx = new Fof_defined_infix_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, TPTPv9Parser.RULE_fof_defined_infix_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1314;
	        this.fof_term();
	        this.state = 1315;
	        this.defined_infix_pred();
	        this.state = 1316;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_atomic_formula() {
	    let localctx = new Fof_system_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, TPTPv9Parser.RULE_fof_system_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        this.fof_system_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_term() {
	    let localctx = new Fof_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, TPTPv9Parser.RULE_fof_plain_term);
	    try {
	        this.state = 1326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1320;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1321;
	            this.functor();
	            this.state = 1322;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1323;
	            this.fof_arguments();
	            this.state = 1324;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_term() {
	    let localctx = new Fof_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, TPTPv9Parser.RULE_fof_defined_term);
	    try {
	        this.state = 1330;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1328;
	            this.defined_term();
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1329;
	            this.fof_defined_atomic_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_term() {
	    let localctx = new Fof_defined_atomic_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, TPTPv9Parser.RULE_fof_defined_atomic_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_term() {
	    let localctx = new Fof_defined_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, TPTPv9Parser.RULE_fof_defined_plain_term);
	    try {
	        this.state = 1340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1334;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1335;
	            this.defined_functor();
	            this.state = 1336;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1337;
	            this.fof_arguments();
	            this.state = 1338;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_term() {
	    let localctx = new Fof_system_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, TPTPv9Parser.RULE_fof_system_term);
	    try {
	        this.state = 1348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1342;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1343;
	            this.system_functor();
	            this.state = 1344;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1345;
	            this.fof_arguments();
	            this.state = 1346;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_arguments() {
	    let localctx = new Fof_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, TPTPv9Parser.RULE_fof_arguments);
	    try {
	        this.state = 1355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1350;
	            this.fof_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1351;
	            this.fof_term();
	            this.state = 1352;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1353;
	            this.fof_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_term() {
	    let localctx = new Fof_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, TPTPv9Parser.RULE_fof_term);
	    try {
	        this.state = 1359;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1357;
	            this.fof_function_term();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1358;
	            this.variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_function_term() {
	    let localctx = new Fof_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, TPTPv9Parser.RULE_fof_function_term);
	    try {
	        this.state = 1364;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1361;
	            this.fof_plain_term();
	            break;
	        case 61:
	        case 62:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1362;
	            this.fof_defined_term();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1363;
	            this.fof_system_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_sequent() {
	    let localctx = new Fof_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, TPTPv9Parser.RULE_fof_sequent);
	    try {
	        this.state = 1374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1366;
	            this.fof_formula_tuple();
	            this.state = 1367;
	            this.gentzen_arrow();
	            this.state = 1368;
	            this.fof_formula_tuple();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1370;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1371;
	            this.fof_sequent();
	            this.state = 1372;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple() {
	    let localctx = new Fof_formula_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, TPTPv9Parser.RULE_fof_formula_tuple);
	    try {
	        this.state = 1381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1376;
	            this.match(TPTPv9Parser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1377;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 1378;
	            this.fof_formula_tuple_list();
	            this.state = 1379;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple_list() {
	    let localctx = new Fof_formula_tuple_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, TPTPv9Parser.RULE_fof_formula_tuple_list);
	    try {
	        this.state = 1388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1383;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1384;
	            this.fof_logic_formula();
	            this.state = 1385;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1386;
	            this.fof_formula_tuple_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_formula() {
	    let localctx = new Cnf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, TPTPv9Parser.RULE_cnf_formula);
	    try {
	        this.state = 1395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1390;
	            this.cnf_disjunction(0);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1391;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1392;
	            this.cnf_formula();
	            this.state = 1393;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	cnf_disjunction(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Cnf_disjunctionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 310;
	    this.enterRecursionRule(localctx, 310, TPTPv9Parser.RULE_cnf_disjunction, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1398;
	        this.cnf_literal();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1405;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Cnf_disjunctionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPv9Parser.RULE_cnf_disjunction);
	                this.state = 1400;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1401;
	                this.match(TPTPv9Parser.Vline);
	                this.state = 1402;
	                this.cnf_literal(); 
	            }
	            this.state = 1407;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	cnf_literal() {
	    let localctx = new Cnf_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, TPTPv9Parser.RULE_cnf_literal);
	    try {
	        this.state = 1417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1408;
	            this.fof_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1409;
	            this.match(TPTPv9Parser.T__27);
	            this.state = 1410;
	            this.fof_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1411;
	            this.match(TPTPv9Parser.T__27);
	            this.state = 1412;
	            this.match(TPTPv9Parser.T__11);
	            this.state = 1413;
	            this.fof_atomic_formula();
	            this.state = 1414;
	            this.match(TPTPv9Parser.T__12);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1416;
	            this.fof_infix_unary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantifier() {
	    let localctx = new Thf_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, TPTPv9Parser.RULE_thf_quantifier);
	    try {
	        this.state = 1422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 34:
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1419;
	            this.fof_quantifier();
	            break;
	        case 30:
	        case 31:
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1420;
	            this.th0_quantifier();
	            break;
	        case 19:
	        case 29:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1421;
	            this.th1_quantifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unary_connective() {
	    let localctx = new Thf_unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, TPTPv9Parser.RULE_thf_unary_connective);
	    try {
	        this.state = 1426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.unary_connective();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this.ntf_short_connective();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_quantifier() {
	    let localctx = new Th1_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, TPTPv9Parser.RULE_th1_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1428;
	        _la = this._input.LA(1);
	        if(!(_la===19 || _la===29)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th0_quantifier() {
	    let localctx = new Th0_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, TPTPv9Parser.RULE_th0_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtype_sign() {
	    let localctx = new Subtype_signContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, TPTPv9Parser.RULE_subtype_sign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.match(TPTPv9Parser.T__32);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unary_connective() {
	    let localctx = new Tff_unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, TPTPv9Parser.RULE_tff_unary_connective);
	    try {
	        this.state = 1436;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1434;
	            this.unary_connective();
	            break;
	        case 23:
	        case 25:
	        case 26:
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1435;
	            this.ntf_short_connective();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_quantifier() {
	    let localctx = new Tff_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, TPTPv9Parser.RULE_tff_quantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1438;
	        this.fof_quantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantifier() {
	    let localctx = new Fof_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, TPTPv9Parser.RULE_fof_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1440;
	        _la = this._input.LA(1);
	        if(!(_la===27 || _la===34 || _la===71)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonassoc_connective() {
	    let localctx = new Nonassoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, TPTPv9Parser.RULE_nonassoc_connective);
	    try {
	        this.state = 1449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1442;
	            this.match(TPTPv9Parser.T__34);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1443;
	            this.match(TPTPv9Parser.T__35);
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1444;
	            this.match(TPTPv9Parser.T__36);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1445;
	            this.match(TPTPv9Parser.T__37);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1446;
	            this.match(TPTPv9Parser.T__27);
	            this.state = 1447;
	            this.match(TPTPv9Parser.Vline);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1448;
	            this.match(TPTPv9Parser.T__38);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assoc_connective() {
	    let localctx = new Assoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, TPTPv9Parser.RULE_assoc_connective);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1451;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_connective() {
	    let localctx = new Unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, TPTPv9Parser.RULE_unary_connective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1453;
	        this.match(TPTPv9Parser.T__27);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gentzen_arrow() {
	    let localctx = new Gentzen_arrowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, TPTPv9Parser.RULE_gentzen_arrow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1455;
	        this.match(TPTPv9Parser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, TPTPv9Parser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1457;
	        this.match(TPTPv9Parser.T__40);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identical() {
	    let localctx = new IdenticalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, TPTPv9Parser.RULE_identical);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1459;
	        this.match(TPTPv9Parser.T__41);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_constant() {
	    let localctx = new Type_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, TPTPv9Parser.RULE_type_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1461;
	        this.type_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_functor() {
	    let localctx = new Type_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, TPTPv9Parser.RULE_type_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_type() {
	    let localctx = new Defined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, TPTPv9Parser.RULE_defined_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1465;
	        this.atomic_defined_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, TPTPv9Parser.RULE_atom);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 63:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1467;
	            this.untyped_atom();
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1468;
	            this.defined_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untyped_atom() {
	    let localctx = new Untyped_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, TPTPv9Parser.RULE_untyped_atom);
	    try {
	        this.state = 1473;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1471;
	            this.constant();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1472;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_infix_pred() {
	    let localctx = new Defined_infix_predContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, TPTPv9Parser.RULE_defined_infix_pred);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1475;
	        this.infix_equality();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_equality() {
	    let localctx = new Infix_equalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, TPTPv9Parser.RULE_infix_equality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1477;
	        this.match(TPTPv9Parser.T__42);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_inequality() {
	    let localctx = new Infix_inequalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, TPTPv9Parser.RULE_infix_inequality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        this.match(TPTPv9Parser.T__43);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, TPTPv9Parser.RULE_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1481;
	        this.functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functor() {
	    let localctx = new FunctorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, TPTPv9Parser.RULE_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1483;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_constant() {
	    let localctx = new Defined_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, TPTPv9Parser.RULE_defined_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1485;
	        this.defined_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_functor() {
	    let localctx = new Defined_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, TPTPv9Parser.RULE_defined_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1487;
	        this.atomic_defined_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_constant() {
	    let localctx = new System_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, TPTPv9Parser.RULE_system_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.system_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_functor() {
	    let localctx = new System_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, TPTPv9Parser.RULE_system_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1491;
	        this.atomic_system_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_or_sys_constant() {
	    let localctx = new Def_or_sys_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, TPTPv9Parser.RULE_def_or_sys_constant);
	    try {
	        this.state = 1495;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1493;
	            this.defined_constant();
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1494;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_defined_term() {
	    let localctx = new Th1_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, TPTPv9Parser.RULE_th1_defined_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_term() {
	    let localctx = new Defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, TPTPv9Parser.RULE_defined_term);
	    try {
	        this.state = 1501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 72:
	        case 75:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.number();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this.match(TPTPv9Parser.Distinct_object);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, TPTPv9Parser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1503;
	        this.match(TPTPv9Parser.Upper_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source() {
	    let localctx = new SourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, TPTPv9Parser.RULE_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1505;
	        this.general_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_info() {
	    let localctx = new Optional_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, TPTPv9Parser.RULE_optional_info);
	    try {
	        this.state = 1510;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1507;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1508;
	            this.useful_info();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1509;
	            this.null_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useful_info() {
	    let localctx = new Useful_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, TPTPv9Parser.RULE_useful_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1512;
	        this.general_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include() {
	    let localctx = new IncludeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, TPTPv9Parser.RULE_include);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1514;
	        this.match(TPTPv9Parser.T__49);
	        this.state = 1515;
	        this.file_name();
	        this.state = 1516;
	        this.include_optionals();
	        this.state = 1517;
	        this.match(TPTPv9Parser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include_optionals() {
	    let localctx = new Include_optionalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, TPTPv9Parser.RULE_include_optionals);
	    try {
	        this.state = 1527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1519;
	            this.null_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1520;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1521;
	            this.formula_selection();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1522;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1523;
	            this.formula_selection();
	            this.state = 1524;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1525;
	            this.space_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_selection() {
	    let localctx = new Formula_selectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, TPTPv9Parser.RULE_formula_selection);
	    try {
	        this.state = 1534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1529;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 1530;
	            this.name_list();
	            this.state = 1531;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1533;
	            this.match(TPTPv9Parser.Star);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, TPTPv9Parser.RULE_name_list);
	    try {
	        this.state = 1541;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1536;
	            this.name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1537;
	            this.name();
	            this.state = 1538;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1539;
	            this.name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	space_name() {
	    let localctx = new Space_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, TPTPv9Parser.RULE_space_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1543;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_term() {
	    let localctx = new General_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, TPTPv9Parser.RULE_general_term);
	    try {
	        this.state = 1551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1545;
	            this.general_data();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1546;
	            this.general_data();
	            this.state = 1547;
	            this.match(TPTPv9Parser.T__15);
	            this.state = 1548;
	            this.general_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1550;
	            this.general_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_data() {
	    let localctx = new General_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, TPTPv9Parser.RULE_general_data);
	    try {
	        this.state = 1559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1553;
	            this.atomic_word();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1554;
	            this.general_function();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1555;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1556;
	            this.number();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1557;
	            this.match(TPTPv9Parser.Distinct_object);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1558;
	            this.formula_data();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_function() {
	    let localctx = new General_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, TPTPv9Parser.RULE_general_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1561;
	        this.atomic_word();
	        this.state = 1562;
	        this.match(TPTPv9Parser.T__11);
	        this.state = 1563;
	        this.general_terms();
	        this.state = 1564;
	        this.match(TPTPv9Parser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_data() {
	    let localctx = new Formula_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, TPTPv9Parser.RULE_formula_data);
	    try {
	        this.state = 1586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1566;
	            this.match(TPTPv9Parser.T__50);
	            this.state = 1567;
	            this.thf_formula();
	            this.state = 1568;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1570;
	            this.match(TPTPv9Parser.T__51);
	            this.state = 1571;
	            this.tff_formula();
	            this.state = 1572;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1574;
	            this.match(TPTPv9Parser.T__52);
	            this.state = 1575;
	            this.fof_formula();
	            this.state = 1576;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1578;
	            this.match(TPTPv9Parser.T__53);
	            this.state = 1579;
	            this.cnf_formula();
	            this.state = 1580;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1582;
	            this.match(TPTPv9Parser.T__54);
	            this.state = 1583;
	            this.fof_term();
	            this.state = 1584;
	            this.match(TPTPv9Parser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_list() {
	    let localctx = new General_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, TPTPv9Parser.RULE_general_list);
	    try {
	        this.state = 1593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1588;
	            this.match(TPTPv9Parser.T__17);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1589;
	            this.match(TPTPv9Parser.T__13);
	            this.state = 1590;
	            this.general_terms();
	            this.state = 1591;
	            this.match(TPTPv9Parser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_terms() {
	    let localctx = new General_termsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, TPTPv9Parser.RULE_general_terms);
	    try {
	        this.state = 1600;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1595;
	            this.general_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1596;
	            this.general_term();
	            this.state = 1597;
	            this.match(TPTPv9Parser.T__1);
	            this.state = 1598;
	            this.general_terms();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, TPTPv9Parser.RULE_name);
	    try {
	        this.state = 1604;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1602;
	            this.atomic_word();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1603;
	            this.match(TPTPv9Parser.Integer);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_word() {
	    let localctx = new Atomic_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, TPTPv9Parser.RULE_atomic_word);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1606;
	        _la = this._input.LA(1);
	        if(!(_la===60 || _la===65)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_defined_word() {
	    let localctx = new Atomic_defined_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, TPTPv9Parser.RULE_atomic_defined_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1608;
	        this.match(TPTPv9Parser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_system_word() {
	    let localctx = new Atomic_system_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, TPTPv9Parser.RULE_atomic_system_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1610;
	        this.match(TPTPv9Parser.Dollar_dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, TPTPv9Parser.RULE_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        _la = this._input.LA(1);
	        if(!(((((_la - 72)) & ~0x1f) === 0 && ((1 << (_la - 72)) & 73) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_name() {
	    let localctx = new File_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, TPTPv9Parser.RULE_file_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1614;
	        this.match(TPTPv9Parser.Single_quoted);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_() {
	    let localctx = new NullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, TPTPv9Parser.RULE_null);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

TPTPv9Parser.EOF = antlr4.Token.EOF;
TPTPv9Parser.T__0 = 1;
TPTPv9Parser.T__1 = 2;
TPTPv9Parser.T__2 = 3;
TPTPv9Parser.T__3 = 4;
TPTPv9Parser.T__4 = 5;
TPTPv9Parser.T__5 = 6;
TPTPv9Parser.T__6 = 7;
TPTPv9Parser.T__7 = 8;
TPTPv9Parser.T__8 = 9;
TPTPv9Parser.T__9 = 10;
TPTPv9Parser.T__10 = 11;
TPTPv9Parser.T__11 = 12;
TPTPv9Parser.T__12 = 13;
TPTPv9Parser.T__13 = 14;
TPTPv9Parser.T__14 = 15;
TPTPv9Parser.T__15 = 16;
TPTPv9Parser.T__16 = 17;
TPTPv9Parser.T__17 = 18;
TPTPv9Parser.T__18 = 19;
TPTPv9Parser.T__19 = 20;
TPTPv9Parser.T__20 = 21;
TPTPv9Parser.T__21 = 22;
TPTPv9Parser.T__22 = 23;
TPTPv9Parser.T__23 = 24;
TPTPv9Parser.T__24 = 25;
TPTPv9Parser.T__25 = 26;
TPTPv9Parser.T__26 = 27;
TPTPv9Parser.T__27 = 28;
TPTPv9Parser.T__28 = 29;
TPTPv9Parser.T__29 = 30;
TPTPv9Parser.T__30 = 31;
TPTPv9Parser.T__31 = 32;
TPTPv9Parser.T__32 = 33;
TPTPv9Parser.T__33 = 34;
TPTPv9Parser.T__34 = 35;
TPTPv9Parser.T__35 = 36;
TPTPv9Parser.T__36 = 37;
TPTPv9Parser.T__37 = 38;
TPTPv9Parser.T__38 = 39;
TPTPv9Parser.T__39 = 40;
TPTPv9Parser.T__40 = 41;
TPTPv9Parser.T__41 = 42;
TPTPv9Parser.T__42 = 43;
TPTPv9Parser.T__43 = 44;
TPTPv9Parser.T__44 = 45;
TPTPv9Parser.T__45 = 46;
TPTPv9Parser.T__46 = 47;
TPTPv9Parser.T__47 = 48;
TPTPv9Parser.T__48 = 49;
TPTPv9Parser.T__49 = 50;
TPTPv9Parser.T__50 = 51;
TPTPv9Parser.T__51 = 52;
TPTPv9Parser.T__52 = 53;
TPTPv9Parser.T__53 = 54;
TPTPv9Parser.T__54 = 55;
TPTPv9Parser.WS = 56;
TPTPv9Parser.Comment_line = 57;
TPTPv9Parser.Comment_block = 58;
TPTPv9Parser.Not_star_slash = 59;
TPTPv9Parser.Single_quoted = 60;
TPTPv9Parser.Distinct_object = 61;
TPTPv9Parser.Dollar_word = 62;
TPTPv9Parser.Dollar_dollar_word = 63;
TPTPv9Parser.Upper_word = 64;
TPTPv9Parser.Lower_word = 65;
TPTPv9Parser.Vline = 66;
TPTPv9Parser.Star = 67;
TPTPv9Parser.Plus = 68;
TPTPv9Parser.Arrow = 69;
TPTPv9Parser.Less_sign = 70;
TPTPv9Parser.Hash = 71;
TPTPv9Parser.Real = 72;
TPTPv9Parser.Signed_real = 73;
TPTPv9Parser.Unsigned_real = 74;
TPTPv9Parser.Rational = 75;
TPTPv9Parser.Signed_rational = 76;
TPTPv9Parser.Unsigned_rational = 77;
TPTPv9Parser.Integer = 78;
TPTPv9Parser.Signed_integer = 79;
TPTPv9Parser.Unsigned_integer = 80;
TPTPv9Parser.Decimal = 81;
TPTPv9Parser.Positive_decimal = 82;
TPTPv9Parser.Decimal_exponent = 83;
TPTPv9Parser.Decimal_fraction = 84;
TPTPv9Parser.Dot_decimal = 85;
TPTPv9Parser.Exp_integer = 86;
TPTPv9Parser.Signed_exp_integer = 87;
TPTPv9Parser.Unsigned_exp_integer = 88;
TPTPv9Parser.Slash = 89;
TPTPv9Parser.Slosh = 90;
TPTPv9Parser.Percentage_sign = 91;
TPTPv9Parser.Double_quote = 92;
TPTPv9Parser.Single_quote = 93;
TPTPv9Parser.Dot = 94;
TPTPv9Parser.Slash_char = 95;
TPTPv9Parser.Slosh_char = 96;
TPTPv9Parser.Zero_numeric = 97;
TPTPv9Parser.Dollar = 98;
TPTPv9Parser.Printable_char = 99;
TPTPv9Parser.Viewable_char = 100;

TPTPv9Parser.RULE_tptp_file = 0;
TPTPv9Parser.RULE_tptp_input = 1;
TPTPv9Parser.RULE_annotated_formula = 2;
TPTPv9Parser.RULE_tpi_annotated = 3;
TPTPv9Parser.RULE_tpi_formula = 4;
TPTPv9Parser.RULE_thf_annotated = 5;
TPTPv9Parser.RULE_tff_annotated = 6;
TPTPv9Parser.RULE_tcf_annotated = 7;
TPTPv9Parser.RULE_fof_annotated = 8;
TPTPv9Parser.RULE_cnf_annotated = 9;
TPTPv9Parser.RULE_annotations = 10;
TPTPv9Parser.RULE_formula_role = 11;
TPTPv9Parser.RULE_thf_formula = 12;
TPTPv9Parser.RULE_thf_logic_formula = 13;
TPTPv9Parser.RULE_thf_binary_formula = 14;
TPTPv9Parser.RULE_thf_binary_nonassoc = 15;
TPTPv9Parser.RULE_thf_binary_assoc = 16;
TPTPv9Parser.RULE_thf_or_formula = 17;
TPTPv9Parser.RULE_thf_and_formula = 18;
TPTPv9Parser.RULE_thf_apply_formula = 19;
TPTPv9Parser.RULE_thf_unit_formula = 20;
TPTPv9Parser.RULE_thf_preunit_formula = 21;
TPTPv9Parser.RULE_thf_unitary_formula = 22;
TPTPv9Parser.RULE_thf_quantified_formula = 23;
TPTPv9Parser.RULE_thf_quantification = 24;
TPTPv9Parser.RULE_thf_variable_list = 25;
TPTPv9Parser.RULE_thf_typed_variable = 26;
TPTPv9Parser.RULE_thf_unary_formula = 27;
TPTPv9Parser.RULE_thf_prefix_unary = 28;
TPTPv9Parser.RULE_thf_infix_unary = 29;
TPTPv9Parser.RULE_thf_atomic_formula = 30;
TPTPv9Parser.RULE_thf_plain_atomic = 31;
TPTPv9Parser.RULE_thf_defined_atomic = 32;
TPTPv9Parser.RULE_thf_defined_term = 33;
TPTPv9Parser.RULE_thf_defined_infix = 34;
TPTPv9Parser.RULE_thf_system_atomic = 35;
TPTPv9Parser.RULE_thf_let = 36;
TPTPv9Parser.RULE_thf_let_types = 37;
TPTPv9Parser.RULE_thf_atom_typing_list = 38;
TPTPv9Parser.RULE_thf_let_defns = 39;
TPTPv9Parser.RULE_thf_let_defn = 40;
TPTPv9Parser.RULE_thf_let_defn_list = 41;
TPTPv9Parser.RULE_thf_unitary_term = 42;
TPTPv9Parser.RULE_thf_conn_term = 43;
TPTPv9Parser.RULE_thf_tuple = 44;
TPTPv9Parser.RULE_thf_fof_function = 45;
TPTPv9Parser.RULE_thf_arguments = 46;
TPTPv9Parser.RULE_thf_formula_list = 47;
TPTPv9Parser.RULE_thf_atom_typing = 48;
TPTPv9Parser.RULE_thf_top_level_type = 49;
TPTPv9Parser.RULE_thf_unitary_type = 50;
TPTPv9Parser.RULE_thf_apply_type = 51;
TPTPv9Parser.RULE_thf_binary_type = 52;
TPTPv9Parser.RULE_thf_mapping_type = 53;
TPTPv9Parser.RULE_thf_xprod_type = 54;
TPTPv9Parser.RULE_thf_union_type = 55;
TPTPv9Parser.RULE_thf_subtype = 56;
TPTPv9Parser.RULE_thf_definition = 57;
TPTPv9Parser.RULE_thf_sequent = 58;
TPTPv9Parser.RULE_tff_formula = 59;
TPTPv9Parser.RULE_tff_logic_formula = 60;
TPTPv9Parser.RULE_tff_binary_formula = 61;
TPTPv9Parser.RULE_tff_binary_nonassoc = 62;
TPTPv9Parser.RULE_tff_binary_assoc = 63;
TPTPv9Parser.RULE_tff_or_formula = 64;
TPTPv9Parser.RULE_tff_and_formula = 65;
TPTPv9Parser.RULE_tff_unit_formula = 66;
TPTPv9Parser.RULE_tff_preunit_formula = 67;
TPTPv9Parser.RULE_tff_unitary_formula = 68;
TPTPv9Parser.RULE_txf_unitary_formula = 69;
TPTPv9Parser.RULE_tff_quantified_formula = 70;
TPTPv9Parser.RULE_tff_variable_list = 71;
TPTPv9Parser.RULE_tff_variable = 72;
TPTPv9Parser.RULE_tff_typed_variable = 73;
TPTPv9Parser.RULE_tff_unary_formula = 74;
TPTPv9Parser.RULE_tff_prefix_unary = 75;
TPTPv9Parser.RULE_tff_infix_unary = 76;
TPTPv9Parser.RULE_tff_atomic_formula = 77;
TPTPv9Parser.RULE_tff_plain_atomic = 78;
TPTPv9Parser.RULE_tff_defined_atomic = 79;
TPTPv9Parser.RULE_tff_defined_plain = 80;
TPTPv9Parser.RULE_tff_defined_infix = 81;
TPTPv9Parser.RULE_tff_system_atomic = 82;
TPTPv9Parser.RULE_txf_let = 83;
TPTPv9Parser.RULE_txf_let_types = 84;
TPTPv9Parser.RULE_tff_atom_typing_list = 85;
TPTPv9Parser.RULE_txf_let_defns = 86;
TPTPv9Parser.RULE_txf_let_defn = 87;
TPTPv9Parser.RULE_txf_let_LHS = 88;
TPTPv9Parser.RULE_txf_let_defn_list = 89;
TPTPv9Parser.RULE_nxf_atom = 90;
TPTPv9Parser.RULE_tff_term = 91;
TPTPv9Parser.RULE_tff_unitary_term = 92;
TPTPv9Parser.RULE_txf_tuple = 93;
TPTPv9Parser.RULE_tff_arguments = 94;
TPTPv9Parser.RULE_tff_atom_typing = 95;
TPTPv9Parser.RULE_tff_top_level_type = 96;
TPTPv9Parser.RULE_tff_non_atomic_type = 97;
TPTPv9Parser.RULE_tf1_quantified_type = 98;
TPTPv9Parser.RULE_tff_monotype = 99;
TPTPv9Parser.RULE_tff_unitary_type = 100;
TPTPv9Parser.RULE_tff_atomic_type = 101;
TPTPv9Parser.RULE_tff_type_arguments = 102;
TPTPv9Parser.RULE_tff_mapping_type = 103;
TPTPv9Parser.RULE_tff_xprod_type = 104;
TPTPv9Parser.RULE_txf_tuple_type = 105;
TPTPv9Parser.RULE_tff_type_list = 106;
TPTPv9Parser.RULE_tff_subtype = 107;
TPTPv9Parser.RULE_txf_definition = 108;
TPTPv9Parser.RULE_txf_sequent = 109;
TPTPv9Parser.RULE_nhf_long_connective = 110;
TPTPv9Parser.RULE_nhf_parameter_list = 111;
TPTPv9Parser.RULE_nhf_parameter = 112;
TPTPv9Parser.RULE_nhf_key_pair = 113;
TPTPv9Parser.RULE_nxf_long_connective = 114;
TPTPv9Parser.RULE_nxf_parameter_list = 115;
TPTPv9Parser.RULE_nxf_parameter = 116;
TPTPv9Parser.RULE_nxf_key_pair = 117;
TPTPv9Parser.RULE_ntf_connective_name = 118;
TPTPv9Parser.RULE_ntf_index = 119;
TPTPv9Parser.RULE_ntf_short_connective = 120;
TPTPv9Parser.RULE_tcf_formula = 121;
TPTPv9Parser.RULE_tcf_logic_formula = 122;
TPTPv9Parser.RULE_tcf_quantified_formula = 123;
TPTPv9Parser.RULE_fof_formula = 124;
TPTPv9Parser.RULE_fof_logic_formula = 125;
TPTPv9Parser.RULE_fof_binary_formula = 126;
TPTPv9Parser.RULE_fof_binary_nonassoc = 127;
TPTPv9Parser.RULE_fof_binary_assoc = 128;
TPTPv9Parser.RULE_fof_or_formula = 129;
TPTPv9Parser.RULE_fof_and_formula = 130;
TPTPv9Parser.RULE_fof_unary_formula = 131;
TPTPv9Parser.RULE_fof_infix_unary = 132;
TPTPv9Parser.RULE_fof_unit_formula = 133;
TPTPv9Parser.RULE_fof_unitary_formula = 134;
TPTPv9Parser.RULE_fof_quantified_formula = 135;
TPTPv9Parser.RULE_fof_variable_list = 136;
TPTPv9Parser.RULE_fof_atomic_formula = 137;
TPTPv9Parser.RULE_fof_plain_atomic_formula = 138;
TPTPv9Parser.RULE_fof_defined_atomic_formula = 139;
TPTPv9Parser.RULE_fof_defined_plain_formula = 140;
TPTPv9Parser.RULE_fof_defined_infix_formula = 141;
TPTPv9Parser.RULE_fof_system_atomic_formula = 142;
TPTPv9Parser.RULE_fof_plain_term = 143;
TPTPv9Parser.RULE_fof_defined_term = 144;
TPTPv9Parser.RULE_fof_defined_atomic_term = 145;
TPTPv9Parser.RULE_fof_defined_plain_term = 146;
TPTPv9Parser.RULE_fof_system_term = 147;
TPTPv9Parser.RULE_fof_arguments = 148;
TPTPv9Parser.RULE_fof_term = 149;
TPTPv9Parser.RULE_fof_function_term = 150;
TPTPv9Parser.RULE_fof_sequent = 151;
TPTPv9Parser.RULE_fof_formula_tuple = 152;
TPTPv9Parser.RULE_fof_formula_tuple_list = 153;
TPTPv9Parser.RULE_cnf_formula = 154;
TPTPv9Parser.RULE_cnf_disjunction = 155;
TPTPv9Parser.RULE_cnf_literal = 156;
TPTPv9Parser.RULE_thf_quantifier = 157;
TPTPv9Parser.RULE_thf_unary_connective = 158;
TPTPv9Parser.RULE_th1_quantifier = 159;
TPTPv9Parser.RULE_th0_quantifier = 160;
TPTPv9Parser.RULE_subtype_sign = 161;
TPTPv9Parser.RULE_tff_unary_connective = 162;
TPTPv9Parser.RULE_tff_quantifier = 163;
TPTPv9Parser.RULE_fof_quantifier = 164;
TPTPv9Parser.RULE_nonassoc_connective = 165;
TPTPv9Parser.RULE_assoc_connective = 166;
TPTPv9Parser.RULE_unary_connective = 167;
TPTPv9Parser.RULE_gentzen_arrow = 168;
TPTPv9Parser.RULE_assignment = 169;
TPTPv9Parser.RULE_identical = 170;
TPTPv9Parser.RULE_type_constant = 171;
TPTPv9Parser.RULE_type_functor = 172;
TPTPv9Parser.RULE_defined_type = 173;
TPTPv9Parser.RULE_atom = 174;
TPTPv9Parser.RULE_untyped_atom = 175;
TPTPv9Parser.RULE_defined_infix_pred = 176;
TPTPv9Parser.RULE_infix_equality = 177;
TPTPv9Parser.RULE_infix_inequality = 178;
TPTPv9Parser.RULE_constant = 179;
TPTPv9Parser.RULE_functor = 180;
TPTPv9Parser.RULE_defined_constant = 181;
TPTPv9Parser.RULE_defined_functor = 182;
TPTPv9Parser.RULE_system_constant = 183;
TPTPv9Parser.RULE_system_functor = 184;
TPTPv9Parser.RULE_def_or_sys_constant = 185;
TPTPv9Parser.RULE_th1_defined_term = 186;
TPTPv9Parser.RULE_defined_term = 187;
TPTPv9Parser.RULE_variable = 188;
TPTPv9Parser.RULE_source = 189;
TPTPv9Parser.RULE_optional_info = 190;
TPTPv9Parser.RULE_useful_info = 191;
TPTPv9Parser.RULE_include = 192;
TPTPv9Parser.RULE_include_optionals = 193;
TPTPv9Parser.RULE_formula_selection = 194;
TPTPv9Parser.RULE_name_list = 195;
TPTPv9Parser.RULE_space_name = 196;
TPTPv9Parser.RULE_general_term = 197;
TPTPv9Parser.RULE_general_data = 198;
TPTPv9Parser.RULE_general_function = 199;
TPTPv9Parser.RULE_formula_data = 200;
TPTPv9Parser.RULE_general_list = 201;
TPTPv9Parser.RULE_general_terms = 202;
TPTPv9Parser.RULE_name = 203;
TPTPv9Parser.RULE_atomic_word = 204;
TPTPv9Parser.RULE_atomic_defined_word = 205;
TPTPv9Parser.RULE_atomic_system_word = 206;
TPTPv9Parser.RULE_number = 207;
TPTPv9Parser.RULE_file_name = 208;
TPTPv9Parser.RULE_null = 209;

class Tptp_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tptp_file;
    }

	EOF() {
	    return this.getToken(TPTPv9Parser.EOF, 0);
	};

	tptp_input = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tptp_inputContext);
	    } else {
	        return this.getTypedRuleContext(Tptp_inputContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTptp_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTptp_file(this);
		}
	}


}



class Tptp_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tptp_input;
    }

	annotated_formula() {
	    return this.getTypedRuleContext(Annotated_formulaContext,0);
	};

	include() {
	    return this.getTypedRuleContext(IncludeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTptp_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTptp_input(this);
		}
	}


}



class Annotated_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_annotated_formula;
    }

	thf_annotated() {
	    return this.getTypedRuleContext(Thf_annotatedContext,0);
	};

	tff_annotated() {
	    return this.getTypedRuleContext(Tff_annotatedContext,0);
	};

	tcf_annotated() {
	    return this.getTypedRuleContext(Tcf_annotatedContext,0);
	};

	fof_annotated() {
	    return this.getTypedRuleContext(Fof_annotatedContext,0);
	};

	cnf_annotated() {
	    return this.getTypedRuleContext(Cnf_annotatedContext,0);
	};

	tpi_annotated() {
	    return this.getTypedRuleContext(Tpi_annotatedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAnnotated_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAnnotated_formula(this);
		}
	}


}



class Tpi_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tpi_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tpi_formula() {
	    return this.getTypedRuleContext(Tpi_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTpi_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTpi_annotated(this);
		}
	}


}



class Tpi_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tpi_formula;
    }

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTpi_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTpi_formula(this);
		}
	}


}



class Thf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_annotated(this);
		}
	}


}



class Tff_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_annotated(this);
		}
	}


}



class Tcf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tcf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tcf_formula() {
	    return this.getTypedRuleContext(Tcf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTcf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTcf_annotated(this);
		}
	}


}



class Fof_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_annotated(this);
		}
	}


}



class Cnf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_cnf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterCnf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitCnf_annotated(this);
		}
	}


}



class AnnotationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_annotations;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAnnotations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAnnotations(this);
		}
	}


}



class Formula_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_formula_role;
    }

	Lower_word() {
	    return this.getToken(TPTPv9Parser.Lower_word, 0);
	};

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFormula_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFormula_role(this);
		}
	}


}



class Thf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_formula;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_subtype() {
	    return this.getTypedRuleContext(Thf_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_formula(this);
		}
	}


}



class Thf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_logic_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_binary_formula() {
	    return this.getTypedRuleContext(Thf_binary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	thf_definition() {
	    return this.getTypedRuleContext(Thf_definitionContext,0);
	};

	thf_sequent() {
	    return this.getTypedRuleContext(Thf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_logic_formula(this);
		}
	}


}



class Thf_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_binary_formula;
    }

	thf_binary_nonassoc() {
	    return this.getTypedRuleContext(Thf_binary_nonassocContext,0);
	};

	thf_binary_assoc() {
	    return this.getTypedRuleContext(Thf_binary_assocContext,0);
	};

	thf_binary_type() {
	    return this.getTypedRuleContext(Thf_binary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_binary_formula(this);
		}
	}


}



class Thf_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_binary_nonassoc;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_binary_nonassoc(this);
		}
	}


}



class Thf_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_binary_assoc;
    }

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_binary_assoc(this);
		}
	}


}



class Thf_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_or_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_or_formula(this);
		}
	}


}



class Thf_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_and_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_and_formula(this);
		}
	}


}



class Thf_apply_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_apply_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_apply_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_apply_formula(this);
		}
	}


}



class Thf_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unit_formula(this);
		}
	}


}



class Thf_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_preunit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_preunit_formula(this);
		}
	}


}



class Thf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unitary_formula;
    }

	thf_quantified_formula() {
	    return this.getTypedRuleContext(Thf_quantified_formulaContext,0);
	};

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unitary_formula(this);
		}
	}


}



class Thf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_quantified_formula;
    }

	thf_quantification() {
	    return this.getTypedRuleContext(Thf_quantificationContext,0);
	};

	thf_unit_formula() {
	    return this.getTypedRuleContext(Thf_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_quantified_formula(this);
		}
	}


}



class Thf_quantificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_quantification;
    }

	thf_quantifier() {
	    return this.getTypedRuleContext(Thf_quantifierContext,0);
	};

	thf_variable_list() {
	    return this.getTypedRuleContext(Thf_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_quantification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_quantification(this);
		}
	}


}



class Thf_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_variable_list;
    }

	thf_typed_variable() {
	    return this.getTypedRuleContext(Thf_typed_variableContext,0);
	};

	thf_variable_list() {
	    return this.getTypedRuleContext(Thf_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_variable_list(this);
		}
	}


}



class Thf_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_typed_variable(this);
		}
	}


}



class Thf_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unary_formula;
    }

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	thf_infix_unary() {
	    return this.getTypedRuleContext(Thf_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unary_formula(this);
		}
	}


}



class Thf_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_prefix_unary;
    }

	thf_unary_connective() {
	    return this.getTypedRuleContext(Thf_unary_connectiveContext,0);
	};

	thf_preunit_formula() {
	    return this.getTypedRuleContext(Thf_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_prefix_unary(this);
		}
	}


}



class Thf_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_infix_unary;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_infix_unary(this);
		}
	}


}



class Thf_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_atomic_formula;
    }

	thf_plain_atomic() {
	    return this.getTypedRuleContext(Thf_plain_atomicContext,0);
	};

	thf_defined_atomic() {
	    return this.getTypedRuleContext(Thf_defined_atomicContext,0);
	};

	thf_system_atomic() {
	    return this.getTypedRuleContext(Thf_system_atomicContext,0);
	};

	thf_fof_function() {
	    return this.getTypedRuleContext(Thf_fof_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_atomic_formula(this);
		}
	}


}



class Thf_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	thf_tuple() {
	    return this.getTypedRuleContext(Thf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_plain_atomic(this);
		}
	}


}



class Thf_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_defined_atomic;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	thf_defined_term() {
	    return this.getTypedRuleContext(Thf_defined_termContext,0);
	};

	thf_conn_term() {
	    return this.getTypedRuleContext(Thf_conn_termContext,0);
	};

	nhf_long_connective() {
	    return this.getTypedRuleContext(Nhf_long_connectiveContext,0);
	};

	thf_let() {
	    return this.getTypedRuleContext(Thf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_defined_atomic(this);
		}
	}


}



class Thf_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	th1_defined_term() {
	    return this.getTypedRuleContext(Th1_defined_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_defined_term(this);
		}
	}


}



class Thf_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_defined_infix;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_defined_infix(this);
		}
	}


}



class Thf_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_system_atomic(this);
		}
	}


}



class Thf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_let;
    }

	thf_let_types() {
	    return this.getTypedRuleContext(Thf_let_typesContext,0);
	};

	thf_let_defns() {
	    return this.getTypedRuleContext(Thf_let_defnsContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_let(this);
		}
	}


}



class Thf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_let_types;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_let_types(this);
		}
	}


}



class Thf_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_atom_typing_list;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_atom_typing_list(this);
		}
	}


}



class Thf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_let_defns;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_let_defns(this);
		}
	}


}



class Thf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_let_defn;
    }

	thf_logic_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_logic_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_logic_formulaContext,i);
	    }
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_let_defn(this);
		}
	}


}



class Thf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_let_defn_list;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_let_defn_list(this);
		}
	}


}



class Thf_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unitary_term;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unitary_term(this);
		}
	}


}



class Thf_conn_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_conn_term;
    }

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	assoc_connective() {
	    return this.getTypedRuleContext(Assoc_connectiveContext,0);
	};

	infix_equality() {
	    return this.getTypedRuleContext(Infix_equalityContext,0);
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	thf_unary_connective() {
	    return this.getTypedRuleContext(Thf_unary_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_conn_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_conn_term(this);
		}
	}


}



class Thf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_tuple;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_tuple(this);
		}
	}


}



class Thf_fof_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_fof_function;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	thf_arguments() {
	    return this.getTypedRuleContext(Thf_argumentsContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_fof_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_fof_function(this);
		}
	}


}



class Thf_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_arguments;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_arguments(this);
		}
	}


}



class Thf_formula_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_formula_list;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_formula_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_formula_list(this);
		}
	}


}



class Thf_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_atom_typing(this);
		}
	}


}



class Thf_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_top_level_type;
    }

	thf_unitary_type() {
	    return this.getTypedRuleContext(Thf_unitary_typeContext,0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_apply_type() {
	    return this.getTypedRuleContext(Thf_apply_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_top_level_type(this);
		}
	}


}



class Thf_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unitary_type;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unitary_type(this);
		}
	}


}



class Thf_apply_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_apply_type;
    }

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_apply_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_apply_type(this);
		}
	}


}



class Thf_binary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_binary_type;
    }

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_binary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_binary_type(this);
		}
	}


}



class Thf_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_mapping_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Arrow() {
	    return this.getToken(TPTPv9Parser.Arrow, 0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_mapping_type(this);
		}
	}


}



class Thf_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_xprod_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Star() {
	    return this.getToken(TPTPv9Parser.Star, 0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_xprod_type(this);
		}
	}


}



class Thf_union_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_union_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Plus() {
	    return this.getToken(TPTPv9Parser.Plus, 0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_union_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_union_type(this);
		}
	}


}



class Thf_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	subtype_sign() {
	    return this.getTypedRuleContext(Subtype_signContext,0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_subtype(this);
		}
	}


}



class Thf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_definition;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	identical() {
	    return this.getTypedRuleContext(IdenticalContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_definition(this);
		}
	}


}



class Thf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_sequent;
    }

	thf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Thf_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_sequent(this);
		}
	}


}



class Tff_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_formula;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_subtype() {
	    return this.getTypedRuleContext(Tff_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_formula(this);
		}
	}


}



class Tff_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_logic_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_binary_formula() {
	    return this.getTypedRuleContext(Tff_binary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	txf_definition() {
	    return this.getTypedRuleContext(Txf_definitionContext,0);
	};

	txf_sequent() {
	    return this.getTypedRuleContext(Txf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_logic_formula(this);
		}
	}


}



class Tff_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_binary_formula;
    }

	tff_binary_nonassoc() {
	    return this.getTypedRuleContext(Tff_binary_nonassocContext,0);
	};

	tff_binary_assoc() {
	    return this.getTypedRuleContext(Tff_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_binary_formula(this);
		}
	}


}



class Tff_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_binary_nonassoc;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_binary_nonassoc(this);
		}
	}


}



class Tff_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_binary_assoc;
    }

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_binary_assoc(this);
		}
	}


}



class Tff_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_or_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_or_formula(this);
		}
	}


}



class Tff_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_and_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_and_formula(this);
		}
	}


}



class Tff_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unit_formula(this);
		}
	}


}



class Tff_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_preunit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_preunit_formula(this);
		}
	}


}



class Tff_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unitary_formula;
    }

	tff_quantified_formula() {
	    return this.getTypedRuleContext(Tff_quantified_formulaContext,0);
	};

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	txf_unitary_formula() {
	    return this.getTypedRuleContext(Txf_unitary_formulaContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unitary_formula(this);
		}
	}


}



class Txf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_unitary_formula;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_unitary_formula(this);
		}
	}


}



class Tff_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_quantified_formula;
    }

	tff_quantifier() {
	    return this.getTypedRuleContext(Tff_quantifierContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_unit_formula() {
	    return this.getTypedRuleContext(Tff_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_quantified_formula(this);
		}
	}


}



class Tff_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_variable_list;
    }

	tff_variable() {
	    return this.getTypedRuleContext(Tff_variableContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_variable_list(this);
		}
	}


}



class Tff_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_variable;
    }

	tff_typed_variable() {
	    return this.getTypedRuleContext(Tff_typed_variableContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_variable(this);
		}
	}


}



class Tff_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_typed_variable(this);
		}
	}


}



class Tff_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unary_formula;
    }

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	tff_infix_unary() {
	    return this.getTypedRuleContext(Tff_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unary_formula(this);
		}
	}


}



class Tff_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_prefix_unary;
    }

	tff_unary_connective() {
	    return this.getTypedRuleContext(Tff_unary_connectiveContext,0);
	};

	tff_preunit_formula() {
	    return this.getTypedRuleContext(Tff_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_prefix_unary(this);
		}
	}


}



class Tff_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_infix_unary;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_infix_unary(this);
		}
	}


}



class Tff_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_atomic_formula;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	tff_defined_atomic() {
	    return this.getTypedRuleContext(Tff_defined_atomicContext,0);
	};

	tff_system_atomic() {
	    return this.getTypedRuleContext(Tff_system_atomicContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_atomic_formula(this);
		}
	}


}



class Tff_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_plain_atomic(this);
		}
	}


}



class Tff_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_defined_atomic;
    }

	tff_defined_plain() {
	    return this.getTypedRuleContext(Tff_defined_plainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_defined_atomic(this);
		}
	}


}



class Tff_defined_plainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_defined_plain;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	nxf_atom() {
	    return this.getTypedRuleContext(Nxf_atomContext,0);
	};

	txf_let() {
	    return this.getTypedRuleContext(Txf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_defined_plain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_defined_plain(this);
		}
	}


}



class Tff_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_defined_infix;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_defined_infix(this);
		}
	}


}



class Tff_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_system_atomic(this);
		}
	}


}



class Txf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let;
    }

	txf_let_types() {
	    return this.getTypedRuleContext(Txf_let_typesContext,0);
	};

	txf_let_defns() {
	    return this.getTypedRuleContext(Txf_let_defnsContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let(this);
		}
	}


}



class Txf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let_types;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let_types(this);
		}
	}


}



class Tff_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_atom_typing_list;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_atom_typing_list(this);
		}
	}


}



class Txf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let_defns;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let_defns(this);
		}
	}


}



class Txf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let_defn;
    }

	txf_let_LHS() {
	    return this.getTypedRuleContext(Txf_let_LHSContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let_defn(this);
		}
	}


}



class Txf_let_LHSContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let_LHS;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let_LHS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let_LHS(this);
		}
	}


}



class Txf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_let_defn_list;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_let_defn_list(this);
		}
	}


}



class Nxf_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nxf_atom;
    }

	nxf_long_connective() {
	    return this.getTypedRuleContext(Nxf_long_connectiveContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNxf_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNxf_atom(this);
		}
	}


}



class Tff_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_term;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_term(this);
		}
	}


}



class Tff_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unitary_term;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unitary_term(this);
		}
	}


}



class Txf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_tuple;
    }

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_tuple(this);
		}
	}


}



class Tff_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_arguments;
    }

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_arguments(this);
		}
	}


}



class Tff_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_atom_typing(this);
		}
	}


}



class Tff_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_top_level_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_top_level_type(this);
		}
	}


}



class Tff_non_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_non_atomic_type;
    }

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tf1_quantified_type() {
	    return this.getTypedRuleContext(Tf1_quantified_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_non_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_non_atomic_type(this);
		}
	}


}



class Tf1_quantified_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tf1_quantified_type;
    }

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_monotype() {
	    return this.getTypedRuleContext(Tff_monotypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTf1_quantified_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTf1_quantified_type(this);
		}
	}


}



class Tff_monotypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_monotype;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tf1_quantified_type() {
	    return this.getTypedRuleContext(Tf1_quantified_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_monotype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_monotype(this);
		}
	}


}



class Tff_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unitary_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unitary_type(this);
		}
	}


}



class Tff_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_atomic_type;
    }

	type_constant() {
	    return this.getTypedRuleContext(Type_constantContext,0);
	};

	defined_type() {
	    return this.getTypedRuleContext(Defined_typeContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	txf_tuple_type() {
	    return this.getTypedRuleContext(Txf_tuple_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_atomic_type(this);
		}
	}


}



class Tff_type_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_type_arguments;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_type_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_type_arguments(this);
		}
	}


}



class Tff_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_mapping_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Arrow() {
	    return this.getToken(TPTPv9Parser.Arrow, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_mapping_type(this);
		}
	}


}



class Tff_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_xprod_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Star() {
	    return this.getToken(TPTPv9Parser.Star, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_xprod_type(this);
		}
	}


}



class Txf_tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_tuple_type;
    }

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_tuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_tuple_type(this);
		}
	}


}



class Tff_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_type_list;
    }

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_type_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_type_list(this);
		}
	}


}



class Tff_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	subtype_sign() {
	    return this.getTypedRuleContext(Subtype_signContext,0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_subtype(this);
		}
	}


}



class Txf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_definition;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	identical() {
	    return this.getTypedRuleContext(IdenticalContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_definition(this);
		}
	}


}



class Txf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_txf_sequent;
    }

	txf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Txf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Txf_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTxf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTxf_sequent(this);
		}
	}


}



class Nhf_long_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nhf_long_connective;
    }

	ntf_connective_name() {
	    return this.getTypedRuleContext(Ntf_connective_nameContext,0);
	};

	nhf_parameter_list() {
	    return this.getTypedRuleContext(Nhf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNhf_long_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNhf_long_connective(this);
		}
	}


}



class Nhf_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nhf_parameter_list;
    }

	nhf_parameter() {
	    return this.getTypedRuleContext(Nhf_parameterContext,0);
	};

	nhf_parameter_list() {
	    return this.getTypedRuleContext(Nhf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNhf_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNhf_parameter_list(this);
		}
	}


}



class Nhf_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nhf_parameter;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	nhf_key_pair() {
	    return this.getTypedRuleContext(Nhf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNhf_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNhf_parameter(this);
		}
	}


}



class Nhf_key_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nhf_key_pair;
    }

	thf_definition() {
	    return this.getTypedRuleContext(Thf_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNhf_key_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNhf_key_pair(this);
		}
	}


}



class Nxf_long_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nxf_long_connective;
    }

	ntf_connective_name() {
	    return this.getTypedRuleContext(Ntf_connective_nameContext,0);
	};

	nxf_parameter_list() {
	    return this.getTypedRuleContext(Nxf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNxf_long_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNxf_long_connective(this);
		}
	}


}



class Nxf_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nxf_parameter_list;
    }

	nxf_parameter() {
	    return this.getTypedRuleContext(Nxf_parameterContext,0);
	};

	nxf_parameter_list() {
	    return this.getTypedRuleContext(Nxf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNxf_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNxf_parameter_list(this);
		}
	}


}



class Nxf_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nxf_parameter;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	nxf_key_pair() {
	    return this.getTypedRuleContext(Nxf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNxf_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNxf_parameter(this);
		}
	}


}



class Nxf_key_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nxf_key_pair;
    }

	txf_definition() {
	    return this.getTypedRuleContext(Txf_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNxf_key_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNxf_key_pair(this);
		}
	}


}



class Ntf_connective_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_ntf_connective_name;
    }

	def_or_sys_constant() {
	    return this.getTypedRuleContext(Def_or_sys_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNtf_connective_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNtf_connective_name(this);
		}
	}


}



class Ntf_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_ntf_index;
    }

	Hash() {
	    return this.getToken(TPTPv9Parser.Hash, 0);
	};

	tff_unitary_term() {
	    return this.getTypedRuleContext(Tff_unitary_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNtf_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNtf_index(this);
		}
	}


}



class Ntf_short_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_ntf_short_connective;
    }

	Less_sign() {
	    return this.getToken(TPTPv9Parser.Less_sign, 0);
	};

	Arrow() {
	    return this.getToken(TPTPv9Parser.Arrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNtf_short_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNtf_short_connective(this);
		}
	}


}



class Tcf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tcf_formula;
    }

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTcf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTcf_formula(this);
		}
	}


}



class Tcf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tcf_logic_formula;
    }

	tcf_quantified_formula() {
	    return this.getTypedRuleContext(Tcf_quantified_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTcf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTcf_logic_formula(this);
		}
	}


}



class Tcf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tcf_quantified_formula;
    }

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTcf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTcf_quantified_formula(this);
		}
	}


}



class Fof_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_formula;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_formula(this);
		}
	}


}



class Fof_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_logic_formula;
    }

	fof_binary_formula() {
	    return this.getTypedRuleContext(Fof_binary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_logic_formula(this);
		}
	}


}



class Fof_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_binary_formula;
    }

	fof_binary_nonassoc() {
	    return this.getTypedRuleContext(Fof_binary_nonassocContext,0);
	};

	fof_binary_assoc() {
	    return this.getTypedRuleContext(Fof_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_binary_formula(this);
		}
	}


}



class Fof_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_binary_nonassoc;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_binary_nonassoc(this);
		}
	}


}



class Fof_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_binary_assoc;
    }

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_binary_assoc(this);
		}
	}


}



class Fof_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_or_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_or_formula(this);
		}
	}


}



class Fof_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_and_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_and_formula(this);
		}
	}


}



class Fof_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_unary_formula;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_unary_formula(this);
		}
	}


}



class Fof_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_infix_unary;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	infix_inequality() {
	    return this.getTypedRuleContext(Infix_inequalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_infix_unary(this);
		}
	}


}



class Fof_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_unit_formula;
    }

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_unit_formula(this);
		}
	}


}



class Fof_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_unitary_formula;
    }

	fof_quantified_formula() {
	    return this.getTypedRuleContext(Fof_quantified_formulaContext,0);
	};

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_unitary_formula(this);
		}
	}


}



class Fof_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_quantified_formula;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_quantified_formula(this);
		}
	}


}



class Fof_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_variable_list;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_variable_list(this);
		}
	}


}



class Fof_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_atomic_formula;
    }

	fof_plain_atomic_formula() {
	    return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);
	};

	fof_defined_atomic_formula() {
	    return this.getTypedRuleContext(Fof_defined_atomic_formulaContext,0);
	};

	fof_system_atomic_formula() {
	    return this.getTypedRuleContext(Fof_system_atomic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_atomic_formula(this);
		}
	}


}



class Fof_plain_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_plain_atomic_formula;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_plain_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_plain_atomic_formula(this);
		}
	}


}



class Fof_defined_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_atomic_formula;
    }

	fof_defined_plain_formula() {
	    return this.getTypedRuleContext(Fof_defined_plain_formulaContext,0);
	};

	fof_defined_infix_formula() {
	    return this.getTypedRuleContext(Fof_defined_infix_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_atomic_formula(this);
		}
	}


}



class Fof_defined_plain_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_plain_formula;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_plain_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_plain_formula(this);
		}
	}


}



class Fof_defined_infix_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_infix_formula;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_infix_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_infix_formula(this);
		}
	}


}



class Fof_system_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_system_atomic_formula;
    }

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_system_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_system_atomic_formula(this);
		}
	}


}



class Fof_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_plain_term;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_plain_term(this);
		}
	}


}



class Fof_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	fof_defined_atomic_term() {
	    return this.getTypedRuleContext(Fof_defined_atomic_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_term(this);
		}
	}


}



class Fof_defined_atomic_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_atomic_term;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_atomic_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_atomic_term(this);
		}
	}


}



class Fof_defined_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_defined_plain_term;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_defined_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_defined_plain_term(this);
		}
	}


}



class Fof_system_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_system_term;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_system_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_system_term(this);
		}
	}


}



class Fof_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_arguments;
    }

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_arguments(this);
		}
	}


}



class Fof_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_term;
    }

	fof_function_term() {
	    return this.getTypedRuleContext(Fof_function_termContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_term(this);
		}
	}


}



class Fof_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_function_term;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	fof_defined_term() {
	    return this.getTypedRuleContext(Fof_defined_termContext,0);
	};

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_function_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_function_term(this);
		}
	}


}



class Fof_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_sequent;
    }

	fof_formula_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_formula_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Fof_formula_tupleContext,i);
	    }
	};

	gentzen_arrow() {
	    return this.getTypedRuleContext(Gentzen_arrowContext,0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_sequent(this);
		}
	}


}



class Fof_formula_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_formula_tuple;
    }

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_formula_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_formula_tuple(this);
		}
	}


}



class Fof_formula_tuple_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_formula_tuple_list;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_formula_tuple_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_formula_tuple_list(this);
		}
	}


}



class Cnf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_cnf_formula;
    }

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterCnf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitCnf_formula(this);
		}
	}


}



class Cnf_disjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_cnf_disjunction;
    }

	cnf_literal() {
	    return this.getTypedRuleContext(Cnf_literalContext,0);
	};

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterCnf_disjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitCnf_disjunction(this);
		}
	}


}



class Cnf_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_cnf_literal;
    }

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterCnf_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitCnf_literal(this);
		}
	}


}



class Thf_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_quantifier;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	th0_quantifier() {
	    return this.getTypedRuleContext(Th0_quantifierContext,0);
	};

	th1_quantifier() {
	    return this.getTypedRuleContext(Th1_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_quantifier(this);
		}
	}


}



class Thf_unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_thf_unary_connective;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	ntf_short_connective() {
	    return this.getTypedRuleContext(Ntf_short_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterThf_unary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitThf_unary_connective(this);
		}
	}


}



class Th1_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_th1_quantifier;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTh1_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTh1_quantifier(this);
		}
	}


}



class Th0_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_th0_quantifier;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTh0_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTh0_quantifier(this);
		}
	}


}



class Subtype_signContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_subtype_sign;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterSubtype_sign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitSubtype_sign(this);
		}
	}


}



class Tff_unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_unary_connective;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	ntf_short_connective() {
	    return this.getTypedRuleContext(Ntf_short_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_unary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_unary_connective(this);
		}
	}


}



class Tff_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_tff_quantifier;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTff_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTff_quantifier(this);
		}
	}


}



class Fof_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_fof_quantifier;
    }

	Hash() {
	    return this.getToken(TPTPv9Parser.Hash, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFof_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFof_quantifier(this);
		}
	}


}



class Nonassoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_nonassoc_connective;
    }

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNonassoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNonassoc_connective(this);
		}
	}


}



class Assoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_assoc_connective;
    }

	Vline() {
	    return this.getToken(TPTPv9Parser.Vline, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAssoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAssoc_connective(this);
		}
	}


}



class Unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_unary_connective;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterUnary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitUnary_connective(this);
		}
	}


}



class Gentzen_arrowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_gentzen_arrow;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGentzen_arrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGentzen_arrow(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_assignment;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAssignment(this);
		}
	}


}



class IdenticalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_identical;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterIdentical(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitIdentical(this);
		}
	}


}



class Type_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_type_constant;
    }

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterType_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitType_constant(this);
		}
	}


}



class Type_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_type_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterType_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitType_functor(this);
		}
	}


}



class Defined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_defined_type;
    }

	atomic_defined_word() {
	    return this.getTypedRuleContext(Atomic_defined_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDefined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDefined_type(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_atom;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAtom(this);
		}
	}


}



class Untyped_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_untyped_atom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterUntyped_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitUntyped_atom(this);
		}
	}


}



class Defined_infix_predContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_defined_infix_pred;
    }

	infix_equality() {
	    return this.getTypedRuleContext(Infix_equalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDefined_infix_pred(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDefined_infix_pred(this);
		}
	}


}



class Infix_equalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_infix_equality;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterInfix_equality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitInfix_equality(this);
		}
	}


}



class Infix_inequalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_infix_inequality;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterInfix_inequality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitInfix_inequality(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_constant;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitConstant(this);
		}
	}


}



class FunctorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFunctor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFunctor(this);
		}
	}


}



class Defined_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_defined_constant;
    }

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDefined_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDefined_constant(this);
		}
	}


}



class Defined_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_defined_functor;
    }

	atomic_defined_word() {
	    return this.getTypedRuleContext(Atomic_defined_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDefined_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDefined_functor(this);
		}
	}


}



class System_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_system_constant;
    }

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterSystem_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitSystem_constant(this);
		}
	}


}



class System_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_system_functor;
    }

	atomic_system_word() {
	    return this.getTypedRuleContext(Atomic_system_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterSystem_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitSystem_functor(this);
		}
	}


}



class Def_or_sys_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_def_or_sys_constant;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDef_or_sys_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDef_or_sys_constant(this);
		}
	}


}



class Th1_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_th1_defined_term;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterTh1_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitTh1_defined_term(this);
		}
	}


}



class Defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_defined_term;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPv9Parser.Distinct_object, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterDefined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitDefined_term(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_variable;
    }

	Upper_word() {
	    return this.getToken(TPTPv9Parser.Upper_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitVariable(this);
		}
	}


}



class SourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_source;
    }

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitSource(this);
		}
	}


}



class Optional_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_optional_info;
    }

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterOptional_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitOptional_info(this);
		}
	}


}



class Useful_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_useful_info;
    }

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterUseful_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitUseful_info(this);
		}
	}


}



class IncludeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_include;
    }

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	include_optionals() {
	    return this.getTypedRuleContext(Include_optionalsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterInclude(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitInclude(this);
		}
	}


}



class Include_optionalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_include_optionals;
    }

	null_() {
	    return this.getTypedRuleContext(NullContext,0);
	};

	formula_selection() {
	    return this.getTypedRuleContext(Formula_selectionContext,0);
	};

	space_name() {
	    return this.getTypedRuleContext(Space_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterInclude_optionals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitInclude_optionals(this);
		}
	}


}



class Formula_selectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_formula_selection;
    }

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	Star() {
	    return this.getToken(TPTPv9Parser.Star, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFormula_selection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFormula_selection(this);
		}
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_name_list;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterName_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitName_list(this);
		}
	}


}



class Space_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_space_name;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterSpace_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitSpace_name(this);
		}
	}


}



class General_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_general_term;
    }

	general_data() {
	    return this.getTypedRuleContext(General_dataContext,0);
	};

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGeneral_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGeneral_term(this);
		}
	}


}



class General_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_general_data;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_function() {
	    return this.getTypedRuleContext(General_functionContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPv9Parser.Distinct_object, 0);
	};

	formula_data() {
	    return this.getTypedRuleContext(Formula_dataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGeneral_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGeneral_data(this);
		}
	}


}



class General_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_general_function;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGeneral_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGeneral_function(this);
		}
	}


}



class Formula_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_formula_data;
    }

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFormula_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFormula_data(this);
		}
	}


}



class General_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_general_list;
    }

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGeneral_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGeneral_list(this);
		}
	}


}



class General_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_general_terms;
    }

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterGeneral_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitGeneral_terms(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	Integer() {
	    return this.getToken(TPTPv9Parser.Integer, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitName(this);
		}
	}


}



class Atomic_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_atomic_word;
    }

	Lower_word() {
	    return this.getToken(TPTPv9Parser.Lower_word, 0);
	};

	Single_quoted() {
	    return this.getToken(TPTPv9Parser.Single_quoted, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAtomic_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAtomic_word(this);
		}
	}


}



class Atomic_defined_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_atomic_defined_word;
    }

	Dollar_word() {
	    return this.getToken(TPTPv9Parser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAtomic_defined_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAtomic_defined_word(this);
		}
	}


}



class Atomic_system_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_atomic_system_word;
    }

	Dollar_dollar_word() {
	    return this.getToken(TPTPv9Parser.Dollar_dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterAtomic_system_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitAtomic_system_word(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_number;
    }

	Integer() {
	    return this.getToken(TPTPv9Parser.Integer, 0);
	};

	Rational() {
	    return this.getToken(TPTPv9Parser.Rational, 0);
	};

	Real() {
	    return this.getToken(TPTPv9Parser.Real, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNumber(this);
		}
	}


}



class File_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_file_name;
    }

	Single_quoted() {
	    return this.getToken(TPTPv9Parser.Single_quoted, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterFile_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitFile_name(this);
		}
	}


}



class NullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPv9Parser.RULE_null;
    }


	enterRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.enterNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPv9Listener ) {
	        listener.exitNull(this);
		}
	}


}




TPTPv9Parser.Tptp_fileContext = Tptp_fileContext; 
TPTPv9Parser.Tptp_inputContext = Tptp_inputContext; 
TPTPv9Parser.Annotated_formulaContext = Annotated_formulaContext; 
TPTPv9Parser.Tpi_annotatedContext = Tpi_annotatedContext; 
TPTPv9Parser.Tpi_formulaContext = Tpi_formulaContext; 
TPTPv9Parser.Thf_annotatedContext = Thf_annotatedContext; 
TPTPv9Parser.Tff_annotatedContext = Tff_annotatedContext; 
TPTPv9Parser.Tcf_annotatedContext = Tcf_annotatedContext; 
TPTPv9Parser.Fof_annotatedContext = Fof_annotatedContext; 
TPTPv9Parser.Cnf_annotatedContext = Cnf_annotatedContext; 
TPTPv9Parser.AnnotationsContext = AnnotationsContext; 
TPTPv9Parser.Formula_roleContext = Formula_roleContext; 
TPTPv9Parser.Thf_formulaContext = Thf_formulaContext; 
TPTPv9Parser.Thf_logic_formulaContext = Thf_logic_formulaContext; 
TPTPv9Parser.Thf_binary_formulaContext = Thf_binary_formulaContext; 
TPTPv9Parser.Thf_binary_nonassocContext = Thf_binary_nonassocContext; 
TPTPv9Parser.Thf_binary_assocContext = Thf_binary_assocContext; 
TPTPv9Parser.Thf_or_formulaContext = Thf_or_formulaContext; 
TPTPv9Parser.Thf_and_formulaContext = Thf_and_formulaContext; 
TPTPv9Parser.Thf_apply_formulaContext = Thf_apply_formulaContext; 
TPTPv9Parser.Thf_unit_formulaContext = Thf_unit_formulaContext; 
TPTPv9Parser.Thf_preunit_formulaContext = Thf_preunit_formulaContext; 
TPTPv9Parser.Thf_unitary_formulaContext = Thf_unitary_formulaContext; 
TPTPv9Parser.Thf_quantified_formulaContext = Thf_quantified_formulaContext; 
TPTPv9Parser.Thf_quantificationContext = Thf_quantificationContext; 
TPTPv9Parser.Thf_variable_listContext = Thf_variable_listContext; 
TPTPv9Parser.Thf_typed_variableContext = Thf_typed_variableContext; 
TPTPv9Parser.Thf_unary_formulaContext = Thf_unary_formulaContext; 
TPTPv9Parser.Thf_prefix_unaryContext = Thf_prefix_unaryContext; 
TPTPv9Parser.Thf_infix_unaryContext = Thf_infix_unaryContext; 
TPTPv9Parser.Thf_atomic_formulaContext = Thf_atomic_formulaContext; 
TPTPv9Parser.Thf_plain_atomicContext = Thf_plain_atomicContext; 
TPTPv9Parser.Thf_defined_atomicContext = Thf_defined_atomicContext; 
TPTPv9Parser.Thf_defined_termContext = Thf_defined_termContext; 
TPTPv9Parser.Thf_defined_infixContext = Thf_defined_infixContext; 
TPTPv9Parser.Thf_system_atomicContext = Thf_system_atomicContext; 
TPTPv9Parser.Thf_letContext = Thf_letContext; 
TPTPv9Parser.Thf_let_typesContext = Thf_let_typesContext; 
TPTPv9Parser.Thf_atom_typing_listContext = Thf_atom_typing_listContext; 
TPTPv9Parser.Thf_let_defnsContext = Thf_let_defnsContext; 
TPTPv9Parser.Thf_let_defnContext = Thf_let_defnContext; 
TPTPv9Parser.Thf_let_defn_listContext = Thf_let_defn_listContext; 
TPTPv9Parser.Thf_unitary_termContext = Thf_unitary_termContext; 
TPTPv9Parser.Thf_conn_termContext = Thf_conn_termContext; 
TPTPv9Parser.Thf_tupleContext = Thf_tupleContext; 
TPTPv9Parser.Thf_fof_functionContext = Thf_fof_functionContext; 
TPTPv9Parser.Thf_argumentsContext = Thf_argumentsContext; 
TPTPv9Parser.Thf_formula_listContext = Thf_formula_listContext; 
TPTPv9Parser.Thf_atom_typingContext = Thf_atom_typingContext; 
TPTPv9Parser.Thf_top_level_typeContext = Thf_top_level_typeContext; 
TPTPv9Parser.Thf_unitary_typeContext = Thf_unitary_typeContext; 
TPTPv9Parser.Thf_apply_typeContext = Thf_apply_typeContext; 
TPTPv9Parser.Thf_binary_typeContext = Thf_binary_typeContext; 
TPTPv9Parser.Thf_mapping_typeContext = Thf_mapping_typeContext; 
TPTPv9Parser.Thf_xprod_typeContext = Thf_xprod_typeContext; 
TPTPv9Parser.Thf_union_typeContext = Thf_union_typeContext; 
TPTPv9Parser.Thf_subtypeContext = Thf_subtypeContext; 
TPTPv9Parser.Thf_definitionContext = Thf_definitionContext; 
TPTPv9Parser.Thf_sequentContext = Thf_sequentContext; 
TPTPv9Parser.Tff_formulaContext = Tff_formulaContext; 
TPTPv9Parser.Tff_logic_formulaContext = Tff_logic_formulaContext; 
TPTPv9Parser.Tff_binary_formulaContext = Tff_binary_formulaContext; 
TPTPv9Parser.Tff_binary_nonassocContext = Tff_binary_nonassocContext; 
TPTPv9Parser.Tff_binary_assocContext = Tff_binary_assocContext; 
TPTPv9Parser.Tff_or_formulaContext = Tff_or_formulaContext; 
TPTPv9Parser.Tff_and_formulaContext = Tff_and_formulaContext; 
TPTPv9Parser.Tff_unit_formulaContext = Tff_unit_formulaContext; 
TPTPv9Parser.Tff_preunit_formulaContext = Tff_preunit_formulaContext; 
TPTPv9Parser.Tff_unitary_formulaContext = Tff_unitary_formulaContext; 
TPTPv9Parser.Txf_unitary_formulaContext = Txf_unitary_formulaContext; 
TPTPv9Parser.Tff_quantified_formulaContext = Tff_quantified_formulaContext; 
TPTPv9Parser.Tff_variable_listContext = Tff_variable_listContext; 
TPTPv9Parser.Tff_variableContext = Tff_variableContext; 
TPTPv9Parser.Tff_typed_variableContext = Tff_typed_variableContext; 
TPTPv9Parser.Tff_unary_formulaContext = Tff_unary_formulaContext; 
TPTPv9Parser.Tff_prefix_unaryContext = Tff_prefix_unaryContext; 
TPTPv9Parser.Tff_infix_unaryContext = Tff_infix_unaryContext; 
TPTPv9Parser.Tff_atomic_formulaContext = Tff_atomic_formulaContext; 
TPTPv9Parser.Tff_plain_atomicContext = Tff_plain_atomicContext; 
TPTPv9Parser.Tff_defined_atomicContext = Tff_defined_atomicContext; 
TPTPv9Parser.Tff_defined_plainContext = Tff_defined_plainContext; 
TPTPv9Parser.Tff_defined_infixContext = Tff_defined_infixContext; 
TPTPv9Parser.Tff_system_atomicContext = Tff_system_atomicContext; 
TPTPv9Parser.Txf_letContext = Txf_letContext; 
TPTPv9Parser.Txf_let_typesContext = Txf_let_typesContext; 
TPTPv9Parser.Tff_atom_typing_listContext = Tff_atom_typing_listContext; 
TPTPv9Parser.Txf_let_defnsContext = Txf_let_defnsContext; 
TPTPv9Parser.Txf_let_defnContext = Txf_let_defnContext; 
TPTPv9Parser.Txf_let_LHSContext = Txf_let_LHSContext; 
TPTPv9Parser.Txf_let_defn_listContext = Txf_let_defn_listContext; 
TPTPv9Parser.Nxf_atomContext = Nxf_atomContext; 
TPTPv9Parser.Tff_termContext = Tff_termContext; 
TPTPv9Parser.Tff_unitary_termContext = Tff_unitary_termContext; 
TPTPv9Parser.Txf_tupleContext = Txf_tupleContext; 
TPTPv9Parser.Tff_argumentsContext = Tff_argumentsContext; 
TPTPv9Parser.Tff_atom_typingContext = Tff_atom_typingContext; 
TPTPv9Parser.Tff_top_level_typeContext = Tff_top_level_typeContext; 
TPTPv9Parser.Tff_non_atomic_typeContext = Tff_non_atomic_typeContext; 
TPTPv9Parser.Tf1_quantified_typeContext = Tf1_quantified_typeContext; 
TPTPv9Parser.Tff_monotypeContext = Tff_monotypeContext; 
TPTPv9Parser.Tff_unitary_typeContext = Tff_unitary_typeContext; 
TPTPv9Parser.Tff_atomic_typeContext = Tff_atomic_typeContext; 
TPTPv9Parser.Tff_type_argumentsContext = Tff_type_argumentsContext; 
TPTPv9Parser.Tff_mapping_typeContext = Tff_mapping_typeContext; 
TPTPv9Parser.Tff_xprod_typeContext = Tff_xprod_typeContext; 
TPTPv9Parser.Txf_tuple_typeContext = Txf_tuple_typeContext; 
TPTPv9Parser.Tff_type_listContext = Tff_type_listContext; 
TPTPv9Parser.Tff_subtypeContext = Tff_subtypeContext; 
TPTPv9Parser.Txf_definitionContext = Txf_definitionContext; 
TPTPv9Parser.Txf_sequentContext = Txf_sequentContext; 
TPTPv9Parser.Nhf_long_connectiveContext = Nhf_long_connectiveContext; 
TPTPv9Parser.Nhf_parameter_listContext = Nhf_parameter_listContext; 
TPTPv9Parser.Nhf_parameterContext = Nhf_parameterContext; 
TPTPv9Parser.Nhf_key_pairContext = Nhf_key_pairContext; 
TPTPv9Parser.Nxf_long_connectiveContext = Nxf_long_connectiveContext; 
TPTPv9Parser.Nxf_parameter_listContext = Nxf_parameter_listContext; 
TPTPv9Parser.Nxf_parameterContext = Nxf_parameterContext; 
TPTPv9Parser.Nxf_key_pairContext = Nxf_key_pairContext; 
TPTPv9Parser.Ntf_connective_nameContext = Ntf_connective_nameContext; 
TPTPv9Parser.Ntf_indexContext = Ntf_indexContext; 
TPTPv9Parser.Ntf_short_connectiveContext = Ntf_short_connectiveContext; 
TPTPv9Parser.Tcf_formulaContext = Tcf_formulaContext; 
TPTPv9Parser.Tcf_logic_formulaContext = Tcf_logic_formulaContext; 
TPTPv9Parser.Tcf_quantified_formulaContext = Tcf_quantified_formulaContext; 
TPTPv9Parser.Fof_formulaContext = Fof_formulaContext; 
TPTPv9Parser.Fof_logic_formulaContext = Fof_logic_formulaContext; 
TPTPv9Parser.Fof_binary_formulaContext = Fof_binary_formulaContext; 
TPTPv9Parser.Fof_binary_nonassocContext = Fof_binary_nonassocContext; 
TPTPv9Parser.Fof_binary_assocContext = Fof_binary_assocContext; 
TPTPv9Parser.Fof_or_formulaContext = Fof_or_formulaContext; 
TPTPv9Parser.Fof_and_formulaContext = Fof_and_formulaContext; 
TPTPv9Parser.Fof_unary_formulaContext = Fof_unary_formulaContext; 
TPTPv9Parser.Fof_infix_unaryContext = Fof_infix_unaryContext; 
TPTPv9Parser.Fof_unit_formulaContext = Fof_unit_formulaContext; 
TPTPv9Parser.Fof_unitary_formulaContext = Fof_unitary_formulaContext; 
TPTPv9Parser.Fof_quantified_formulaContext = Fof_quantified_formulaContext; 
TPTPv9Parser.Fof_variable_listContext = Fof_variable_listContext; 
TPTPv9Parser.Fof_atomic_formulaContext = Fof_atomic_formulaContext; 
TPTPv9Parser.Fof_plain_atomic_formulaContext = Fof_plain_atomic_formulaContext; 
TPTPv9Parser.Fof_defined_atomic_formulaContext = Fof_defined_atomic_formulaContext; 
TPTPv9Parser.Fof_defined_plain_formulaContext = Fof_defined_plain_formulaContext; 
TPTPv9Parser.Fof_defined_infix_formulaContext = Fof_defined_infix_formulaContext; 
TPTPv9Parser.Fof_system_atomic_formulaContext = Fof_system_atomic_formulaContext; 
TPTPv9Parser.Fof_plain_termContext = Fof_plain_termContext; 
TPTPv9Parser.Fof_defined_termContext = Fof_defined_termContext; 
TPTPv9Parser.Fof_defined_atomic_termContext = Fof_defined_atomic_termContext; 
TPTPv9Parser.Fof_defined_plain_termContext = Fof_defined_plain_termContext; 
TPTPv9Parser.Fof_system_termContext = Fof_system_termContext; 
TPTPv9Parser.Fof_argumentsContext = Fof_argumentsContext; 
TPTPv9Parser.Fof_termContext = Fof_termContext; 
TPTPv9Parser.Fof_function_termContext = Fof_function_termContext; 
TPTPv9Parser.Fof_sequentContext = Fof_sequentContext; 
TPTPv9Parser.Fof_formula_tupleContext = Fof_formula_tupleContext; 
TPTPv9Parser.Fof_formula_tuple_listContext = Fof_formula_tuple_listContext; 
TPTPv9Parser.Cnf_formulaContext = Cnf_formulaContext; 
TPTPv9Parser.Cnf_disjunctionContext = Cnf_disjunctionContext; 
TPTPv9Parser.Cnf_literalContext = Cnf_literalContext; 
TPTPv9Parser.Thf_quantifierContext = Thf_quantifierContext; 
TPTPv9Parser.Thf_unary_connectiveContext = Thf_unary_connectiveContext; 
TPTPv9Parser.Th1_quantifierContext = Th1_quantifierContext; 
TPTPv9Parser.Th0_quantifierContext = Th0_quantifierContext; 
TPTPv9Parser.Subtype_signContext = Subtype_signContext; 
TPTPv9Parser.Tff_unary_connectiveContext = Tff_unary_connectiveContext; 
TPTPv9Parser.Tff_quantifierContext = Tff_quantifierContext; 
TPTPv9Parser.Fof_quantifierContext = Fof_quantifierContext; 
TPTPv9Parser.Nonassoc_connectiveContext = Nonassoc_connectiveContext; 
TPTPv9Parser.Assoc_connectiveContext = Assoc_connectiveContext; 
TPTPv9Parser.Unary_connectiveContext = Unary_connectiveContext; 
TPTPv9Parser.Gentzen_arrowContext = Gentzen_arrowContext; 
TPTPv9Parser.AssignmentContext = AssignmentContext; 
TPTPv9Parser.IdenticalContext = IdenticalContext; 
TPTPv9Parser.Type_constantContext = Type_constantContext; 
TPTPv9Parser.Type_functorContext = Type_functorContext; 
TPTPv9Parser.Defined_typeContext = Defined_typeContext; 
TPTPv9Parser.AtomContext = AtomContext; 
TPTPv9Parser.Untyped_atomContext = Untyped_atomContext; 
TPTPv9Parser.Defined_infix_predContext = Defined_infix_predContext; 
TPTPv9Parser.Infix_equalityContext = Infix_equalityContext; 
TPTPv9Parser.Infix_inequalityContext = Infix_inequalityContext; 
TPTPv9Parser.ConstantContext = ConstantContext; 
TPTPv9Parser.FunctorContext = FunctorContext; 
TPTPv9Parser.Defined_constantContext = Defined_constantContext; 
TPTPv9Parser.Defined_functorContext = Defined_functorContext; 
TPTPv9Parser.System_constantContext = System_constantContext; 
TPTPv9Parser.System_functorContext = System_functorContext; 
TPTPv9Parser.Def_or_sys_constantContext = Def_or_sys_constantContext; 
TPTPv9Parser.Th1_defined_termContext = Th1_defined_termContext; 
TPTPv9Parser.Defined_termContext = Defined_termContext; 
TPTPv9Parser.VariableContext = VariableContext; 
TPTPv9Parser.SourceContext = SourceContext; 
TPTPv9Parser.Optional_infoContext = Optional_infoContext; 
TPTPv9Parser.Useful_infoContext = Useful_infoContext; 
TPTPv9Parser.IncludeContext = IncludeContext; 
TPTPv9Parser.Include_optionalsContext = Include_optionalsContext; 
TPTPv9Parser.Formula_selectionContext = Formula_selectionContext; 
TPTPv9Parser.Name_listContext = Name_listContext; 
TPTPv9Parser.Space_nameContext = Space_nameContext; 
TPTPv9Parser.General_termContext = General_termContext; 
TPTPv9Parser.General_dataContext = General_dataContext; 
TPTPv9Parser.General_functionContext = General_functionContext; 
TPTPv9Parser.Formula_dataContext = Formula_dataContext; 
TPTPv9Parser.General_listContext = General_listContext; 
TPTPv9Parser.General_termsContext = General_termsContext; 
TPTPv9Parser.NameContext = NameContext; 
TPTPv9Parser.Atomic_wordContext = Atomic_wordContext; 
TPTPv9Parser.Atomic_defined_wordContext = Atomic_defined_wordContext; 
TPTPv9Parser.Atomic_system_wordContext = Atomic_system_wordContext; 
TPTPv9Parser.NumberContext = NumberContext; 
TPTPv9Parser.File_nameContext = File_nameContext; 
TPTPv9Parser.NullContext = NullContext; 
